//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DatGenerator {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("Global")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Global : System.Data.DataSet {
        
        private _treeBaseAccountsDataTable table_treeBaseAccounts;
        
        private _treeCardsDataTable table_treeCards;
        
        private _treeClientsDataTable table_treeClients;
        
        private _treeExtAccountsDataTable table_treeExtAccounts;
        
        private _treeOperationsDataTable table_treeOperations;
        
        private BaseAccount_CardsDataTable tableBaseAccount_Cards;
        
        private BaseAccountsDataTable tableBaseAccounts;
        
        private BaseChartsDataTable tableBaseCharts;
        
        private CardsDataTable tableCards;
        
        private CardTypesDataTable tableCardTypes;
        
        private Client_RegDocsDataTable tableClient_RegDocs;
        
        private ClientsDataTable tableClients;
        
        private ClientsFLDataTable tableClientsFL;
        
        private ClientsPFDataTable tableClientsPF;
        
        private ClientsULDataTable tableClientsUL;
        
        private ExtAccount_CardsDataTable tableExtAccount_Cards;
        
        private ExtAccountsDataTable tableExtAccounts;
        
        private ExtChartsDataTable tableExtCharts;
        
        private linkAccountsDataTable tablelinkAccounts;
        
        private MyTestDocumentDataTable tableMyTestDocument;
        
        private Operation_DetailsDataTable tableOperation_Details;
        
        private OperationsDataTable tableOperations;
        
        private RegDocsDataTable tableRegDocs;
        
        private RegDocTypesDataTable tableRegDocTypes;
        
        private RegsDataTable tableRegs;
        
        private Regs_DetailsDataTable tableRegs_Details;
        
        private TransactionsDataTable tableTransactions;
        
        private TransTypesDataTable tableTransTypes;
        
        private System.Data.DataRelation relationFK_treeBaseAccounts_treeBaseAccounts1;
        
        private System.Data.DataRelation relationFK_treeCards_treeCards1;
        
        private System.Data.DataRelation relationFK_treeClients_treeClients;
        
        private System.Data.DataRelation relationFK_treeExtAccounts_treeExtAccounts1;
        
        private System.Data.DataRelation relationFK_treeOperations_parent;
        
        private System.Data.DataRelation relationFK_BaseAccount_Cards_BaseAccounts;
        
        private System.Data.DataRelation relationFK_BaseAccount_Cards_CardTypes;
        
        private System.Data.DataRelation relationFK_BaseAccount_Cards_treeCards;
        
        private System.Data.DataRelation relationFK_BaseAccounts_treeBaseAccounts1;
        
        private System.Data.DataRelation relationFK_BaseCharts_treeBaseAccounts;
        
        private System.Data.DataRelation relationFK_Cards_treeCards1;
        
        private System.Data.DataRelation relationFK_CardTypes_treeCards;
        
        private System.Data.DataRelation relationFK_Client_RegDocs_Clients;
        
        private System.Data.DataRelation relationFK_Client_RegDocs_RegDocs;
        
        private System.Data.DataRelation relationFK_Clients_Clients;
        
        private System.Data.DataRelation relationFK_ClientsFIZ_Clients;
        
        private System.Data.DataRelation relationFK_ClientsNPF_Clients;
        
        private System.Data.DataRelation relationFK_ClientsJUR_Clients;
        
        private System.Data.DataRelation relationFK_ExtAccount_Cards_CardTypes;
        
        private System.Data.DataRelation relationFK_ExtAccount_Cards_ExtAccounts;
        
        private System.Data.DataRelation relationFK_ExtAccounts_treeExtAccounts1;
        
        private System.Data.DataRelation relationFK_ExtCharts_BaseCharts;
        
        private System.Data.DataRelation relationFK_ExtCharts_treeExtAccounts;
        
        private System.Data.DataRelation relationFK_linkAccounts_BaseAccounts;
        
        private System.Data.DataRelation relationFK_linkAccounts_ExtAccounts;
        
        private System.Data.DataRelation relationFK_linkAccounts_ExtAccounts1;
        
        private System.Data.DataRelation relationFK_linkAccounts_ExtCharts;
        
        private System.Data.DataRelation relationFK_MyTestDocument_Clients;
        
        private System.Data.DataRelation relationFK_MyTestDocument_RegDocs;
        
        private System.Data.DataRelation relationFK_Operation_Details_Cards;
        
        private System.Data.DataRelation relationFK_Operation_Details_Operations;
        
        private System.Data.DataRelation relationFK_Operation_Details_treeCards;
        
        private System.Data.DataRelation relationFK_Operations_BaseAccount_Cr;
        
        private System.Data.DataRelation relationFK_Operations_BaseAccount_Dt;
        
        private System.Data.DataRelation relationFK_Operations_RegDocTypes;
        
        private System.Data.DataRelation relationFK_Operations_treeOperations;
        
        private System.Data.DataRelation relationFK_RegDocs_RegDocTypes;
        
        private System.Data.DataRelation relationFK_Regs_BaseAccounts;
        
        private System.Data.DataRelation relationFK_Regs_Details_Cards;
        
        private System.Data.DataRelation relationFK_Regs_Details_Regs;
        
        private System.Data.DataRelation relationFK_Transactions_BaseCharts;
        
        private System.Data.DataRelation relationFK_Transactions_Clients;
        
        private System.Data.DataRelation relationFK_Transactions_Operations;
        
        private System.Data.DataRelation relationFK_Transactions_RegDocs;
        
        private System.Data.DataRelation relationFK_Transactions_Regs_Cr;
        
        private System.Data.DataRelation relationFK_Transactions_Regs_Dt;
        
        private System.Data.DataRelation relationFK_Transactions_TransTypes;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Global() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Global(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["_treeBaseAccounts"] != null)) {
                    base.Tables.Add(new _treeBaseAccountsDataTable(ds.Tables["_treeBaseAccounts"]));
                }
                if ((ds.Tables["_treeCards"] != null)) {
                    base.Tables.Add(new _treeCardsDataTable(ds.Tables["_treeCards"]));
                }
                if ((ds.Tables["_treeClients"] != null)) {
                    base.Tables.Add(new _treeClientsDataTable(ds.Tables["_treeClients"]));
                }
                if ((ds.Tables["_treeExtAccounts"] != null)) {
                    base.Tables.Add(new _treeExtAccountsDataTable(ds.Tables["_treeExtAccounts"]));
                }
                if ((ds.Tables["_treeOperations"] != null)) {
                    base.Tables.Add(new _treeOperationsDataTable(ds.Tables["_treeOperations"]));
                }
                if ((ds.Tables["BaseAccount_Cards"] != null)) {
                    base.Tables.Add(new BaseAccount_CardsDataTable(ds.Tables["BaseAccount_Cards"]));
                }
                if ((ds.Tables["BaseAccounts"] != null)) {
                    base.Tables.Add(new BaseAccountsDataTable(ds.Tables["BaseAccounts"]));
                }
                if ((ds.Tables["BaseCharts"] != null)) {
                    base.Tables.Add(new BaseChartsDataTable(ds.Tables["BaseCharts"]));
                }
                if ((ds.Tables["Cards"] != null)) {
                    base.Tables.Add(new CardsDataTable(ds.Tables["Cards"]));
                }
                if ((ds.Tables["CardTypes"] != null)) {
                    base.Tables.Add(new CardTypesDataTable(ds.Tables["CardTypes"]));
                }
                if ((ds.Tables["Client_RegDocs"] != null)) {
                    base.Tables.Add(new Client_RegDocsDataTable(ds.Tables["Client_RegDocs"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["ClientsFL"] != null)) {
                    base.Tables.Add(new ClientsFLDataTable(ds.Tables["ClientsFL"]));
                }
                if ((ds.Tables["ClientsPF"] != null)) {
                    base.Tables.Add(new ClientsPFDataTable(ds.Tables["ClientsPF"]));
                }
                if ((ds.Tables["ClientsUL"] != null)) {
                    base.Tables.Add(new ClientsULDataTable(ds.Tables["ClientsUL"]));
                }
                if ((ds.Tables["ExtAccount_Cards"] != null)) {
                    base.Tables.Add(new ExtAccount_CardsDataTable(ds.Tables["ExtAccount_Cards"]));
                }
                if ((ds.Tables["ExtAccounts"] != null)) {
                    base.Tables.Add(new ExtAccountsDataTable(ds.Tables["ExtAccounts"]));
                }
                if ((ds.Tables["ExtCharts"] != null)) {
                    base.Tables.Add(new ExtChartsDataTable(ds.Tables["ExtCharts"]));
                }
                if ((ds.Tables["linkAccounts"] != null)) {
                    base.Tables.Add(new linkAccountsDataTable(ds.Tables["linkAccounts"]));
                }
                if ((ds.Tables["MyTestDocument"] != null)) {
                    base.Tables.Add(new MyTestDocumentDataTable(ds.Tables["MyTestDocument"]));
                }
                if ((ds.Tables["Operation_Details"] != null)) {
                    base.Tables.Add(new Operation_DetailsDataTable(ds.Tables["Operation_Details"]));
                }
                if ((ds.Tables["Operations"] != null)) {
                    base.Tables.Add(new OperationsDataTable(ds.Tables["Operations"]));
                }
                if ((ds.Tables["RegDocs"] != null)) {
                    base.Tables.Add(new RegDocsDataTable(ds.Tables["RegDocs"]));
                }
                if ((ds.Tables["RegDocTypes"] != null)) {
                    base.Tables.Add(new RegDocTypesDataTable(ds.Tables["RegDocTypes"]));
                }
                if ((ds.Tables["Regs"] != null)) {
                    base.Tables.Add(new RegsDataTable(ds.Tables["Regs"]));
                }
                if ((ds.Tables["Regs_Details"] != null)) {
                    base.Tables.Add(new Regs_DetailsDataTable(ds.Tables["Regs_Details"]));
                }
                if ((ds.Tables["Transactions"] != null)) {
                    base.Tables.Add(new TransactionsDataTable(ds.Tables["Transactions"]));
                }
                if ((ds.Tables["TransTypes"] != null)) {
                    base.Tables.Add(new TransTypesDataTable(ds.Tables["TransTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _treeBaseAccountsDataTable _treeBaseAccounts {
            get {
                return this.table_treeBaseAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _treeCardsDataTable _treeCards {
            get {
                return this.table_treeCards;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _treeClientsDataTable _treeClients {
            get {
                return this.table_treeClients;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _treeExtAccountsDataTable _treeExtAccounts {
            get {
                return this.table_treeExtAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _treeOperationsDataTable _treeOperations {
            get {
                return this.table_treeOperations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseAccount_CardsDataTable BaseAccount_Cards {
            get {
                return this.tableBaseAccount_Cards;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseAccountsDataTable BaseAccounts {
            get {
                return this.tableBaseAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseChartsDataTable BaseCharts {
            get {
                return this.tableBaseCharts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardsDataTable Cards {
            get {
                return this.tableCards;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CardTypesDataTable CardTypes {
            get {
                return this.tableCardTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Client_RegDocsDataTable Client_RegDocs {
            get {
                return this.tableClient_RegDocs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsDataTable Clients {
            get {
                return this.tableClients;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsFLDataTable ClientsFL {
            get {
                return this.tableClientsFL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsPFDataTable ClientsPF {
            get {
                return this.tableClientsPF;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsULDataTable ClientsUL {
            get {
                return this.tableClientsUL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtAccount_CardsDataTable ExtAccount_Cards {
            get {
                return this.tableExtAccount_Cards;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtAccountsDataTable ExtAccounts {
            get {
                return this.tableExtAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtChartsDataTable ExtCharts {
            get {
                return this.tableExtCharts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public linkAccountsDataTable linkAccounts {
            get {
                return this.tablelinkAccounts;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MyTestDocumentDataTable MyTestDocument {
            get {
                return this.tableMyTestDocument;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Operation_DetailsDataTable Operation_Details {
            get {
                return this.tableOperation_Details;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationsDataTable Operations {
            get {
                return this.tableOperations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegDocsDataTable RegDocs {
            get {
                return this.tableRegDocs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegDocTypesDataTable RegDocTypes {
            get {
                return this.tableRegDocTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegsDataTable Regs {
            get {
                return this.tableRegs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Regs_DetailsDataTable Regs_Details {
            get {
                return this.tableRegs_Details;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionsDataTable Transactions {
            get {
                return this.tableTransactions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransTypesDataTable TransTypes {
            get {
                return this.tableTransTypes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Global cln = ((Global)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["_treeBaseAccounts"] != null)) {
                    base.Tables.Add(new _treeBaseAccountsDataTable(ds.Tables["_treeBaseAccounts"]));
                }
                if ((ds.Tables["_treeCards"] != null)) {
                    base.Tables.Add(new _treeCardsDataTable(ds.Tables["_treeCards"]));
                }
                if ((ds.Tables["_treeClients"] != null)) {
                    base.Tables.Add(new _treeClientsDataTable(ds.Tables["_treeClients"]));
                }
                if ((ds.Tables["_treeExtAccounts"] != null)) {
                    base.Tables.Add(new _treeExtAccountsDataTable(ds.Tables["_treeExtAccounts"]));
                }
                if ((ds.Tables["_treeOperations"] != null)) {
                    base.Tables.Add(new _treeOperationsDataTable(ds.Tables["_treeOperations"]));
                }
                if ((ds.Tables["BaseAccount_Cards"] != null)) {
                    base.Tables.Add(new BaseAccount_CardsDataTable(ds.Tables["BaseAccount_Cards"]));
                }
                if ((ds.Tables["BaseAccounts"] != null)) {
                    base.Tables.Add(new BaseAccountsDataTable(ds.Tables["BaseAccounts"]));
                }
                if ((ds.Tables["BaseCharts"] != null)) {
                    base.Tables.Add(new BaseChartsDataTable(ds.Tables["BaseCharts"]));
                }
                if ((ds.Tables["Cards"] != null)) {
                    base.Tables.Add(new CardsDataTable(ds.Tables["Cards"]));
                }
                if ((ds.Tables["CardTypes"] != null)) {
                    base.Tables.Add(new CardTypesDataTable(ds.Tables["CardTypes"]));
                }
                if ((ds.Tables["Client_RegDocs"] != null)) {
                    base.Tables.Add(new Client_RegDocsDataTable(ds.Tables["Client_RegDocs"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["ClientsFL"] != null)) {
                    base.Tables.Add(new ClientsFLDataTable(ds.Tables["ClientsFL"]));
                }
                if ((ds.Tables["ClientsPF"] != null)) {
                    base.Tables.Add(new ClientsPFDataTable(ds.Tables["ClientsPF"]));
                }
                if ((ds.Tables["ClientsUL"] != null)) {
                    base.Tables.Add(new ClientsULDataTable(ds.Tables["ClientsUL"]));
                }
                if ((ds.Tables["ExtAccount_Cards"] != null)) {
                    base.Tables.Add(new ExtAccount_CardsDataTable(ds.Tables["ExtAccount_Cards"]));
                }
                if ((ds.Tables["ExtAccounts"] != null)) {
                    base.Tables.Add(new ExtAccountsDataTable(ds.Tables["ExtAccounts"]));
                }
                if ((ds.Tables["ExtCharts"] != null)) {
                    base.Tables.Add(new ExtChartsDataTable(ds.Tables["ExtCharts"]));
                }
                if ((ds.Tables["linkAccounts"] != null)) {
                    base.Tables.Add(new linkAccountsDataTable(ds.Tables["linkAccounts"]));
                }
                if ((ds.Tables["MyTestDocument"] != null)) {
                    base.Tables.Add(new MyTestDocumentDataTable(ds.Tables["MyTestDocument"]));
                }
                if ((ds.Tables["Operation_Details"] != null)) {
                    base.Tables.Add(new Operation_DetailsDataTable(ds.Tables["Operation_Details"]));
                }
                if ((ds.Tables["Operations"] != null)) {
                    base.Tables.Add(new OperationsDataTable(ds.Tables["Operations"]));
                }
                if ((ds.Tables["RegDocs"] != null)) {
                    base.Tables.Add(new RegDocsDataTable(ds.Tables["RegDocs"]));
                }
                if ((ds.Tables["RegDocTypes"] != null)) {
                    base.Tables.Add(new RegDocTypesDataTable(ds.Tables["RegDocTypes"]));
                }
                if ((ds.Tables["Regs"] != null)) {
                    base.Tables.Add(new RegsDataTable(ds.Tables["Regs"]));
                }
                if ((ds.Tables["Regs_Details"] != null)) {
                    base.Tables.Add(new Regs_DetailsDataTable(ds.Tables["Regs_Details"]));
                }
                if ((ds.Tables["Transactions"] != null)) {
                    base.Tables.Add(new TransactionsDataTable(ds.Tables["Transactions"]));
                }
                if ((ds.Tables["TransTypes"] != null)) {
                    base.Tables.Add(new TransTypesDataTable(ds.Tables["TransTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.table_treeBaseAccounts = ((_treeBaseAccountsDataTable)(base.Tables["_treeBaseAccounts"]));
            if ((initTable == true)) {
                if ((this.table_treeBaseAccounts != null)) {
                    this.table_treeBaseAccounts.InitVars();
                }
            }
            this.table_treeCards = ((_treeCardsDataTable)(base.Tables["_treeCards"]));
            if ((initTable == true)) {
                if ((this.table_treeCards != null)) {
                    this.table_treeCards.InitVars();
                }
            }
            this.table_treeClients = ((_treeClientsDataTable)(base.Tables["_treeClients"]));
            if ((initTable == true)) {
                if ((this.table_treeClients != null)) {
                    this.table_treeClients.InitVars();
                }
            }
            this.table_treeExtAccounts = ((_treeExtAccountsDataTable)(base.Tables["_treeExtAccounts"]));
            if ((initTable == true)) {
                if ((this.table_treeExtAccounts != null)) {
                    this.table_treeExtAccounts.InitVars();
                }
            }
            this.table_treeOperations = ((_treeOperationsDataTable)(base.Tables["_treeOperations"]));
            if ((initTable == true)) {
                if ((this.table_treeOperations != null)) {
                    this.table_treeOperations.InitVars();
                }
            }
            this.tableBaseAccount_Cards = ((BaseAccount_CardsDataTable)(base.Tables["BaseAccount_Cards"]));
            if ((initTable == true)) {
                if ((this.tableBaseAccount_Cards != null)) {
                    this.tableBaseAccount_Cards.InitVars();
                }
            }
            this.tableBaseAccounts = ((BaseAccountsDataTable)(base.Tables["BaseAccounts"]));
            if ((initTable == true)) {
                if ((this.tableBaseAccounts != null)) {
                    this.tableBaseAccounts.InitVars();
                }
            }
            this.tableBaseCharts = ((BaseChartsDataTable)(base.Tables["BaseCharts"]));
            if ((initTable == true)) {
                if ((this.tableBaseCharts != null)) {
                    this.tableBaseCharts.InitVars();
                }
            }
            this.tableCards = ((CardsDataTable)(base.Tables["Cards"]));
            if ((initTable == true)) {
                if ((this.tableCards != null)) {
                    this.tableCards.InitVars();
                }
            }
            this.tableCardTypes = ((CardTypesDataTable)(base.Tables["CardTypes"]));
            if ((initTable == true)) {
                if ((this.tableCardTypes != null)) {
                    this.tableCardTypes.InitVars();
                }
            }
            this.tableClient_RegDocs = ((Client_RegDocsDataTable)(base.Tables["Client_RegDocs"]));
            if ((initTable == true)) {
                if ((this.tableClient_RegDocs != null)) {
                    this.tableClient_RegDocs.InitVars();
                }
            }
            this.tableClients = ((ClientsDataTable)(base.Tables["Clients"]));
            if ((initTable == true)) {
                if ((this.tableClients != null)) {
                    this.tableClients.InitVars();
                }
            }
            this.tableClientsFL = ((ClientsFLDataTable)(base.Tables["ClientsFL"]));
            if ((initTable == true)) {
                if ((this.tableClientsFL != null)) {
                    this.tableClientsFL.InitVars();
                }
            }
            this.tableClientsPF = ((ClientsPFDataTable)(base.Tables["ClientsPF"]));
            if ((initTable == true)) {
                if ((this.tableClientsPF != null)) {
                    this.tableClientsPF.InitVars();
                }
            }
            this.tableClientsUL = ((ClientsULDataTable)(base.Tables["ClientsUL"]));
            if ((initTable == true)) {
                if ((this.tableClientsUL != null)) {
                    this.tableClientsUL.InitVars();
                }
            }
            this.tableExtAccount_Cards = ((ExtAccount_CardsDataTable)(base.Tables["ExtAccount_Cards"]));
            if ((initTable == true)) {
                if ((this.tableExtAccount_Cards != null)) {
                    this.tableExtAccount_Cards.InitVars();
                }
            }
            this.tableExtAccounts = ((ExtAccountsDataTable)(base.Tables["ExtAccounts"]));
            if ((initTable == true)) {
                if ((this.tableExtAccounts != null)) {
                    this.tableExtAccounts.InitVars();
                }
            }
            this.tableExtCharts = ((ExtChartsDataTable)(base.Tables["ExtCharts"]));
            if ((initTable == true)) {
                if ((this.tableExtCharts != null)) {
                    this.tableExtCharts.InitVars();
                }
            }
            this.tablelinkAccounts = ((linkAccountsDataTable)(base.Tables["linkAccounts"]));
            if ((initTable == true)) {
                if ((this.tablelinkAccounts != null)) {
                    this.tablelinkAccounts.InitVars();
                }
            }
            this.tableMyTestDocument = ((MyTestDocumentDataTable)(base.Tables["MyTestDocument"]));
            if ((initTable == true)) {
                if ((this.tableMyTestDocument != null)) {
                    this.tableMyTestDocument.InitVars();
                }
            }
            this.tableOperation_Details = ((Operation_DetailsDataTable)(base.Tables["Operation_Details"]));
            if ((initTable == true)) {
                if ((this.tableOperation_Details != null)) {
                    this.tableOperation_Details.InitVars();
                }
            }
            this.tableOperations = ((OperationsDataTable)(base.Tables["Operations"]));
            if ((initTable == true)) {
                if ((this.tableOperations != null)) {
                    this.tableOperations.InitVars();
                }
            }
            this.tableRegDocs = ((RegDocsDataTable)(base.Tables["RegDocs"]));
            if ((initTable == true)) {
                if ((this.tableRegDocs != null)) {
                    this.tableRegDocs.InitVars();
                }
            }
            this.tableRegDocTypes = ((RegDocTypesDataTable)(base.Tables["RegDocTypes"]));
            if ((initTable == true)) {
                if ((this.tableRegDocTypes != null)) {
                    this.tableRegDocTypes.InitVars();
                }
            }
            this.tableRegs = ((RegsDataTable)(base.Tables["Regs"]));
            if ((initTable == true)) {
                if ((this.tableRegs != null)) {
                    this.tableRegs.InitVars();
                }
            }
            this.tableRegs_Details = ((Regs_DetailsDataTable)(base.Tables["Regs_Details"]));
            if ((initTable == true)) {
                if ((this.tableRegs_Details != null)) {
                    this.tableRegs_Details.InitVars();
                }
            }
            this.tableTransactions = ((TransactionsDataTable)(base.Tables["Transactions"]));
            if ((initTable == true)) {
                if ((this.tableTransactions != null)) {
                    this.tableTransactions.InitVars();
                }
            }
            this.tableTransTypes = ((TransTypesDataTable)(base.Tables["TransTypes"]));
            if ((initTable == true)) {
                if ((this.tableTransTypes != null)) {
                    this.tableTransTypes.InitVars();
                }
            }
            this.relationFK_treeBaseAccounts_treeBaseAccounts1 = this.Relations["FK_treeBaseAccounts_treeBaseAccounts1"];
            this.relationFK_treeCards_treeCards1 = this.Relations["FK_treeCards_treeCards1"];
            this.relationFK_treeClients_treeClients = this.Relations["FK_treeClients_treeClients"];
            this.relationFK_treeExtAccounts_treeExtAccounts1 = this.Relations["FK_treeExtAccounts_treeExtAccounts1"];
            this.relationFK_treeOperations_parent = this.Relations["FK_treeOperations_parent"];
            this.relationFK_BaseAccount_Cards_BaseAccounts = this.Relations["FK_BaseAccount_Cards_BaseAccounts"];
            this.relationFK_BaseAccount_Cards_CardTypes = this.Relations["FK_BaseAccount_Cards_CardTypes"];
            this.relationFK_BaseAccount_Cards_treeCards = this.Relations["FK_BaseAccount_Cards_treeCards"];
            this.relationFK_BaseAccounts_treeBaseAccounts1 = this.Relations["FK_BaseAccounts_treeBaseAccounts1"];
            this.relationFK_BaseCharts_treeBaseAccounts = this.Relations["FK_BaseCharts_treeBaseAccounts"];
            this.relationFK_Cards_treeCards1 = this.Relations["FK_Cards_treeCards1"];
            this.relationFK_CardTypes_treeCards = this.Relations["FK_CardTypes_treeCards"];
            this.relationFK_Client_RegDocs_Clients = this.Relations["FK_Client_RegDocs_Clients"];
            this.relationFK_Client_RegDocs_RegDocs = this.Relations["FK_Client_RegDocs_RegDocs"];
            this.relationFK_Clients_Clients = this.Relations["FK_Clients_Clients"];
            this.relationFK_ClientsFIZ_Clients = this.Relations["FK_ClientsFIZ_Clients"];
            this.relationFK_ClientsNPF_Clients = this.Relations["FK_ClientsNPF_Clients"];
            this.relationFK_ClientsJUR_Clients = this.Relations["FK_ClientsJUR_Clients"];
            this.relationFK_ExtAccount_Cards_CardTypes = this.Relations["FK_ExtAccount_Cards_CardTypes"];
            this.relationFK_ExtAccount_Cards_ExtAccounts = this.Relations["FK_ExtAccount_Cards_ExtAccounts"];
            this.relationFK_ExtAccounts_treeExtAccounts1 = this.Relations["FK_ExtAccounts_treeExtAccounts1"];
            this.relationFK_ExtCharts_BaseCharts = this.Relations["FK_ExtCharts_BaseCharts"];
            this.relationFK_ExtCharts_treeExtAccounts = this.Relations["FK_ExtCharts_treeExtAccounts"];
            this.relationFK_linkAccounts_BaseAccounts = this.Relations["FK_linkAccounts_BaseAccounts"];
            this.relationFK_linkAccounts_ExtAccounts = this.Relations["FK_linkAccounts_ExtAccounts"];
            this.relationFK_linkAccounts_ExtAccounts1 = this.Relations["FK_linkAccounts_ExtAccounts1"];
            this.relationFK_linkAccounts_ExtCharts = this.Relations["FK_linkAccounts_ExtCharts"];
            this.relationFK_MyTestDocument_Clients = this.Relations["FK_MyTestDocument_Clients"];
            this.relationFK_MyTestDocument_RegDocs = this.Relations["FK_MyTestDocument_RegDocs"];
            this.relationFK_Operation_Details_Cards = this.Relations["FK_Operation_Details_Cards"];
            this.relationFK_Operation_Details_Operations = this.Relations["FK_Operation_Details_Operations"];
            this.relationFK_Operation_Details_treeCards = this.Relations["FK_Operation_Details_treeCards"];
            this.relationFK_Operations_BaseAccount_Cr = this.Relations["FK_Operations_BaseAccount_Cr"];
            this.relationFK_Operations_BaseAccount_Dt = this.Relations["FK_Operations_BaseAccount_Dt"];
            this.relationFK_Operations_RegDocTypes = this.Relations["FK_Operations_RegDocTypes"];
            this.relationFK_Operations_treeOperations = this.Relations["FK_Operations_treeOperations"];
            this.relationFK_RegDocs_RegDocTypes = this.Relations["FK_RegDocs_RegDocTypes"];
            this.relationFK_Regs_BaseAccounts = this.Relations["FK_Regs_BaseAccounts"];
            this.relationFK_Regs_Details_Cards = this.Relations["FK_Regs_Details_Cards"];
            this.relationFK_Regs_Details_Regs = this.Relations["FK_Regs_Details_Regs"];
            this.relationFK_Transactions_BaseCharts = this.Relations["FK_Transactions_BaseCharts"];
            this.relationFK_Transactions_Clients = this.Relations["FK_Transactions_Clients"];
            this.relationFK_Transactions_Operations = this.Relations["FK_Transactions_Operations"];
            this.relationFK_Transactions_RegDocs = this.Relations["FK_Transactions_RegDocs"];
            this.relationFK_Transactions_Regs_Cr = this.Relations["FK_Transactions_Regs_Cr"];
            this.relationFK_Transactions_Regs_Dt = this.Relations["FK_Transactions_Regs_Dt"];
            this.relationFK_Transactions_TransTypes = this.Relations["FK_Transactions_TransTypes"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Global";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.table_treeBaseAccounts = new _treeBaseAccountsDataTable();
            base.Tables.Add(this.table_treeBaseAccounts);
            this.table_treeCards = new _treeCardsDataTable();
            base.Tables.Add(this.table_treeCards);
            this.table_treeClients = new _treeClientsDataTable();
            base.Tables.Add(this.table_treeClients);
            this.table_treeExtAccounts = new _treeExtAccountsDataTable();
            base.Tables.Add(this.table_treeExtAccounts);
            this.table_treeOperations = new _treeOperationsDataTable();
            base.Tables.Add(this.table_treeOperations);
            this.tableBaseAccount_Cards = new BaseAccount_CardsDataTable();
            base.Tables.Add(this.tableBaseAccount_Cards);
            this.tableBaseAccounts = new BaseAccountsDataTable();
            base.Tables.Add(this.tableBaseAccounts);
            this.tableBaseCharts = new BaseChartsDataTable();
            base.Tables.Add(this.tableBaseCharts);
            this.tableCards = new CardsDataTable();
            base.Tables.Add(this.tableCards);
            this.tableCardTypes = new CardTypesDataTable();
            base.Tables.Add(this.tableCardTypes);
            this.tableClient_RegDocs = new Client_RegDocsDataTable();
            base.Tables.Add(this.tableClient_RegDocs);
            this.tableClients = new ClientsDataTable();
            base.Tables.Add(this.tableClients);
            this.tableClientsFL = new ClientsFLDataTable();
            base.Tables.Add(this.tableClientsFL);
            this.tableClientsPF = new ClientsPFDataTable();
            base.Tables.Add(this.tableClientsPF);
            this.tableClientsUL = new ClientsULDataTable();
            base.Tables.Add(this.tableClientsUL);
            this.tableExtAccount_Cards = new ExtAccount_CardsDataTable();
            base.Tables.Add(this.tableExtAccount_Cards);
            this.tableExtAccounts = new ExtAccountsDataTable();
            base.Tables.Add(this.tableExtAccounts);
            this.tableExtCharts = new ExtChartsDataTable();
            base.Tables.Add(this.tableExtCharts);
            this.tablelinkAccounts = new linkAccountsDataTable();
            base.Tables.Add(this.tablelinkAccounts);
            this.tableMyTestDocument = new MyTestDocumentDataTable();
            base.Tables.Add(this.tableMyTestDocument);
            this.tableOperation_Details = new Operation_DetailsDataTable();
            base.Tables.Add(this.tableOperation_Details);
            this.tableOperations = new OperationsDataTable();
            base.Tables.Add(this.tableOperations);
            this.tableRegDocs = new RegDocsDataTable();
            base.Tables.Add(this.tableRegDocs);
            this.tableRegDocTypes = new RegDocTypesDataTable();
            base.Tables.Add(this.tableRegDocTypes);
            this.tableRegs = new RegsDataTable();
            base.Tables.Add(this.tableRegs);
            this.tableRegs_Details = new Regs_DetailsDataTable();
            base.Tables.Add(this.tableRegs_Details);
            this.tableTransactions = new TransactionsDataTable();
            base.Tables.Add(this.tableTransactions);
            this.tableTransTypes = new TransTypesDataTable();
            base.Tables.Add(this.tableTransTypes);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_treeBaseAccounts_treeBaseAccounts1", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.Parent_FPColumn});
            this.table_treeBaseAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_treeCards_treeCards1", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeCards.Parent_FPColumn});
            this.table_treeCards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_treeClients_treeClients", new System.Data.DataColumn[] {
                        this.table_treeClients.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeClients.Parent_FPColumn});
            this.table_treeClients.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_treeExtAccounts_treeExtAccounts1", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.Parent_FPColumn});
            this.table_treeExtAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_treeOperations_parent", new System.Data.DataColumn[] {
                        this.table_treeOperations.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeOperations.Parent_FPColumn});
            this.table_treeOperations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_BaseAccount_Cards_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.Header_idColumn});
            this.tableBaseAccount_Cards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_BaseAccount_Cards_CardTypes", new System.Data.DataColumn[] {
                        this.tableCardTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.CardType_idColumn});
            this.tableBaseAccount_Cards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_BaseAccount_Cards_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.TreeCard_idColumn});
            this.tableBaseAccount_Cards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_BaseAccounts_treeBaseAccounts1", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccounts.Parent_FPColumn});
            this.tableBaseAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_BaseCharts_treeBaseAccounts", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableBaseCharts.FPColumn});
            this.tableBaseCharts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Cards_treeCards1", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.tableCards.Parent_FPColumn});
            this.tableCards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_CardTypes_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.tableCardTypes.FPColumn});
            this.tableCardTypes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Client_RegDocs_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClient_RegDocs.Client_idColumn});
            this.tableClient_RegDocs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Client_RegDocs_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableClient_RegDocs.Header_idColumn});
            this.tableClient_RegDocs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Clients_Clients", new System.Data.DataColumn[] {
                        this.table_treeClients.FPColumn}, new System.Data.DataColumn[] {
                        this.tableClients.Parent_FPColumn});
            this.tableClients.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ClientsFIZ_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsFL.idColumn});
            this.tableClientsFL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ClientsNPF_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsPF.idColumn});
            this.tableClientsPF.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ClientsJUR_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsUL.idColumn});
            this.tableClientsUL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ExtAccount_Cards_CardTypes", new System.Data.DataColumn[] {
                        this.tableCardTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccount_Cards.CardType_idColumn});
            this.tableExtAccount_Cards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ExtAccount_Cards_ExtAccounts", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccount_Cards.Header_idColumn});
            this.tableExtAccount_Cards.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ExtAccounts_treeExtAccounts1", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccounts.Parent_FPColumn});
            this.tableExtAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ExtCharts_BaseCharts", new System.Data.DataColumn[] {
                        this.tableBaseCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtCharts.BaseChart_idColumn});
            this.tableExtCharts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_ExtCharts_treeExtAccounts", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableExtCharts.FPColumn});
            this.tableExtCharts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_linkAccounts_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.BaseAccount_idColumn});
            this.tablelinkAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_linkAccounts_ExtAccounts", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtAccount1_idColumn});
            this.tablelinkAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_linkAccounts_ExtAccounts1", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtAccount2_idColumn});
            this.tablelinkAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_linkAccounts_ExtCharts", new System.Data.DataColumn[] {
                        this.tableExtCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtChart_idColumn});
            this.tablelinkAccounts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_MyTestDocument_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableMyTestDocument.Client_idColumn});
            this.tableMyTestDocument.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_MyTestDocument_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableMyTestDocument.RegDoc_idColumn});
            this.tableMyTestDocument.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operation_Details_Cards", new System.Data.DataColumn[] {
                        this.tableCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.Card_idColumn});
            this.tableOperation_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operation_Details_Operations", new System.Data.DataColumn[] {
                        this.tableOperations.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.Header_idColumn});
            this.tableOperation_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operation_Details_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.TreeCard_idColumn});
            this.tableOperation_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operations_BaseAccount_Cr", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Cr_Account_idColumn});
            this.tableOperations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operations_BaseAccount_Dt", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Dt_Account_idColumn});
            this.tableOperations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operations_RegDocTypes", new System.Data.DataColumn[] {
                        this.tableRegDocTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.RegDocType_idColumn});
            this.tableOperations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Operations_treeOperations", new System.Data.DataColumn[] {
                        this.table_treeOperations.FPColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Parent_FPColumn});
            this.tableOperations.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_RegDocs_RegDocTypes", new System.Data.DataColumn[] {
                        this.tableRegDocTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegDocs.RegDocType_idColumn});
            this.tableRegDocs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Regs_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs.BaseAccount_idColumn});
            this.tableRegs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Regs_Details_Cards", new System.Data.DataColumn[] {
                        this.tableCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs_Details.Card_idColumn});
            this.tableRegs_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Regs_Details_Regs", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs_Details.Header_idColumn});
            this.tableRegs_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_BaseCharts", new System.Data.DataColumn[] {
                        this.tableBaseCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Chart_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Client_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_Operations", new System.Data.DataColumn[] {
                        this.tableOperations.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Operation_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.RegDoc_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_Regs_Cr", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.cr_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_Regs_Dt", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.dt_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Transactions_TransTypes", new System.Data.DataColumn[] {
                        this.tableTransTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Type_idColumn});
            this.tableTransactions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_treeBaseAccounts_treeBaseAccounts1 = new System.Data.DataRelation("FK_treeBaseAccounts_treeBaseAccounts1", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_treeBaseAccounts_treeBaseAccounts1);
            this.relationFK_treeCards_treeCards1 = new System.Data.DataRelation("FK_treeCards_treeCards1", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeCards.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_treeCards_treeCards1);
            this.relationFK_treeClients_treeClients = new System.Data.DataRelation("FK_treeClients_treeClients", new System.Data.DataColumn[] {
                        this.table_treeClients.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeClients.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_treeClients_treeClients);
            this.relationFK_treeExtAccounts_treeExtAccounts1 = new System.Data.DataRelation("FK_treeExtAccounts_treeExtAccounts1", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_treeExtAccounts_treeExtAccounts1);
            this.relationFK_treeOperations_parent = new System.Data.DataRelation("FK_treeOperations_parent", new System.Data.DataColumn[] {
                        this.table_treeOperations.FPColumn}, new System.Data.DataColumn[] {
                        this.table_treeOperations.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_treeOperations_parent);
            this.relationFK_BaseAccount_Cards_BaseAccounts = new System.Data.DataRelation("FK_BaseAccount_Cards_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.Header_idColumn}, false);
            this.Relations.Add(this.relationFK_BaseAccount_Cards_BaseAccounts);
            this.relationFK_BaseAccount_Cards_CardTypes = new System.Data.DataRelation("FK_BaseAccount_Cards_CardTypes", new System.Data.DataColumn[] {
                        this.tableCardTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.CardType_idColumn}, false);
            this.Relations.Add(this.relationFK_BaseAccount_Cards_CardTypes);
            this.relationFK_BaseAccount_Cards_treeCards = new System.Data.DataRelation("FK_BaseAccount_Cards_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccount_Cards.TreeCard_idColumn}, false);
            this.Relations.Add(this.relationFK_BaseAccount_Cards_treeCards);
            this.relationFK_BaseAccounts_treeBaseAccounts1 = new System.Data.DataRelation("FK_BaseAccounts_treeBaseAccounts1", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableBaseAccounts.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_BaseAccounts_treeBaseAccounts1);
            this.relationFK_BaseCharts_treeBaseAccounts = new System.Data.DataRelation("FK_BaseCharts_treeBaseAccounts", new System.Data.DataColumn[] {
                        this.table_treeBaseAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableBaseCharts.FPColumn}, false);
            this.Relations.Add(this.relationFK_BaseCharts_treeBaseAccounts);
            this.relationFK_Cards_treeCards1 = new System.Data.DataRelation("FK_Cards_treeCards1", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.tableCards.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_Cards_treeCards1);
            this.relationFK_CardTypes_treeCards = new System.Data.DataRelation("FK_CardTypes_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.FPColumn}, new System.Data.DataColumn[] {
                        this.tableCardTypes.FPColumn}, false);
            this.Relations.Add(this.relationFK_CardTypes_treeCards);
            this.relationFK_Client_RegDocs_Clients = new System.Data.DataRelation("FK_Client_RegDocs_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClient_RegDocs.Client_idColumn}, false);
            this.Relations.Add(this.relationFK_Client_RegDocs_Clients);
            this.relationFK_Client_RegDocs_RegDocs = new System.Data.DataRelation("FK_Client_RegDocs_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableClient_RegDocs.Header_idColumn}, false);
            this.Relations.Add(this.relationFK_Client_RegDocs_RegDocs);
            this.relationFK_Clients_Clients = new System.Data.DataRelation("FK_Clients_Clients", new System.Data.DataColumn[] {
                        this.table_treeClients.FPColumn}, new System.Data.DataColumn[] {
                        this.tableClients.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_Clients_Clients);
            this.relationFK_ClientsFIZ_Clients = new System.Data.DataRelation("FK_ClientsFIZ_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsFL.idColumn}, false);
            this.Relations.Add(this.relationFK_ClientsFIZ_Clients);
            this.relationFK_ClientsNPF_Clients = new System.Data.DataRelation("FK_ClientsNPF_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsPF.idColumn}, false);
            this.Relations.Add(this.relationFK_ClientsNPF_Clients);
            this.relationFK_ClientsJUR_Clients = new System.Data.DataRelation("FK_ClientsJUR_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableClientsUL.idColumn}, false);
            this.Relations.Add(this.relationFK_ClientsJUR_Clients);
            this.relationFK_ExtAccount_Cards_CardTypes = new System.Data.DataRelation("FK_ExtAccount_Cards_CardTypes", new System.Data.DataColumn[] {
                        this.tableCardTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccount_Cards.CardType_idColumn}, false);
            this.Relations.Add(this.relationFK_ExtAccount_Cards_CardTypes);
            this.relationFK_ExtAccount_Cards_ExtAccounts = new System.Data.DataRelation("FK_ExtAccount_Cards_ExtAccounts", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccount_Cards.Header_idColumn}, false);
            this.Relations.Add(this.relationFK_ExtAccount_Cards_ExtAccounts);
            this.relationFK_ExtAccounts_treeExtAccounts1 = new System.Data.DataRelation("FK_ExtAccounts_treeExtAccounts1", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableExtAccounts.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_ExtAccounts_treeExtAccounts1);
            this.relationFK_ExtCharts_BaseCharts = new System.Data.DataRelation("FK_ExtCharts_BaseCharts", new System.Data.DataColumn[] {
                        this.tableBaseCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tableExtCharts.BaseChart_idColumn}, false);
            this.Relations.Add(this.relationFK_ExtCharts_BaseCharts);
            this.relationFK_ExtCharts_treeExtAccounts = new System.Data.DataRelation("FK_ExtCharts_treeExtAccounts", new System.Data.DataColumn[] {
                        this.table_treeExtAccounts.FPColumn}, new System.Data.DataColumn[] {
                        this.tableExtCharts.FPColumn}, false);
            this.Relations.Add(this.relationFK_ExtCharts_treeExtAccounts);
            this.relationFK_linkAccounts_BaseAccounts = new System.Data.DataRelation("FK_linkAccounts_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.BaseAccount_idColumn}, false);
            this.Relations.Add(this.relationFK_linkAccounts_BaseAccounts);
            this.relationFK_linkAccounts_ExtAccounts = new System.Data.DataRelation("FK_linkAccounts_ExtAccounts", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtAccount1_idColumn}, false);
            this.Relations.Add(this.relationFK_linkAccounts_ExtAccounts);
            this.relationFK_linkAccounts_ExtAccounts1 = new System.Data.DataRelation("FK_linkAccounts_ExtAccounts1", new System.Data.DataColumn[] {
                        this.tableExtAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtAccount2_idColumn}, false);
            this.Relations.Add(this.relationFK_linkAccounts_ExtAccounts1);
            this.relationFK_linkAccounts_ExtCharts = new System.Data.DataRelation("FK_linkAccounts_ExtCharts", new System.Data.DataColumn[] {
                        this.tableExtCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tablelinkAccounts.ExtChart_idColumn}, false);
            this.Relations.Add(this.relationFK_linkAccounts_ExtCharts);
            this.relationFK_MyTestDocument_Clients = new System.Data.DataRelation("FK_MyTestDocument_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableMyTestDocument.Client_idColumn}, false);
            this.Relations.Add(this.relationFK_MyTestDocument_Clients);
            this.relationFK_MyTestDocument_RegDocs = new System.Data.DataRelation("FK_MyTestDocument_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableMyTestDocument.RegDoc_idColumn}, false);
            this.Relations.Add(this.relationFK_MyTestDocument_RegDocs);
            this.relationFK_Operation_Details_Cards = new System.Data.DataRelation("FK_Operation_Details_Cards", new System.Data.DataColumn[] {
                        this.tableCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.Card_idColumn}, false);
            this.Relations.Add(this.relationFK_Operation_Details_Cards);
            this.relationFK_Operation_Details_Operations = new System.Data.DataRelation("FK_Operation_Details_Operations", new System.Data.DataColumn[] {
                        this.tableOperations.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.Header_idColumn}, false);
            this.Relations.Add(this.relationFK_Operation_Details_Operations);
            this.relationFK_Operation_Details_treeCards = new System.Data.DataRelation("FK_Operation_Details_treeCards", new System.Data.DataColumn[] {
                        this.table_treeCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperation_Details.TreeCard_idColumn}, false);
            this.Relations.Add(this.relationFK_Operation_Details_treeCards);
            this.relationFK_Operations_BaseAccount_Cr = new System.Data.DataRelation("FK_Operations_BaseAccount_Cr", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Cr_Account_idColumn}, false);
            this.Relations.Add(this.relationFK_Operations_BaseAccount_Cr);
            this.relationFK_Operations_BaseAccount_Dt = new System.Data.DataRelation("FK_Operations_BaseAccount_Dt", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Dt_Account_idColumn}, false);
            this.Relations.Add(this.relationFK_Operations_BaseAccount_Dt);
            this.relationFK_Operations_RegDocTypes = new System.Data.DataRelation("FK_Operations_RegDocTypes", new System.Data.DataColumn[] {
                        this.tableRegDocTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.RegDocType_idColumn}, false);
            this.Relations.Add(this.relationFK_Operations_RegDocTypes);
            this.relationFK_Operations_treeOperations = new System.Data.DataRelation("FK_Operations_treeOperations", new System.Data.DataColumn[] {
                        this.table_treeOperations.FPColumn}, new System.Data.DataColumn[] {
                        this.tableOperations.Parent_FPColumn}, false);
            this.Relations.Add(this.relationFK_Operations_treeOperations);
            this.relationFK_RegDocs_RegDocTypes = new System.Data.DataRelation("FK_RegDocs_RegDocTypes", new System.Data.DataColumn[] {
                        this.tableRegDocTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegDocs.RegDocType_idColumn}, false);
            this.Relations.Add(this.relationFK_RegDocs_RegDocTypes);
            this.relationFK_Regs_BaseAccounts = new System.Data.DataRelation("FK_Regs_BaseAccounts", new System.Data.DataColumn[] {
                        this.tableBaseAccounts.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs.BaseAccount_idColumn}, false);
            this.Relations.Add(this.relationFK_Regs_BaseAccounts);
            this.relationFK_Regs_Details_Cards = new System.Data.DataRelation("FK_Regs_Details_Cards", new System.Data.DataColumn[] {
                        this.tableCards.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs_Details.Card_idColumn}, false);
            this.Relations.Add(this.relationFK_Regs_Details_Cards);
            this.relationFK_Regs_Details_Regs = new System.Data.DataRelation("FK_Regs_Details_Regs", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableRegs_Details.Header_idColumn}, false);
            this.Relations.Add(this.relationFK_Regs_Details_Regs);
            this.relationFK_Transactions_BaseCharts = new System.Data.DataRelation("FK_Transactions_BaseCharts", new System.Data.DataColumn[] {
                        this.tableBaseCharts.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Chart_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_BaseCharts);
            this.relationFK_Transactions_Clients = new System.Data.DataRelation("FK_Transactions_Clients", new System.Data.DataColumn[] {
                        this.tableClients.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Client_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_Clients);
            this.relationFK_Transactions_Operations = new System.Data.DataRelation("FK_Transactions_Operations", new System.Data.DataColumn[] {
                        this.tableOperations.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Operation_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_Operations);
            this.relationFK_Transactions_RegDocs = new System.Data.DataRelation("FK_Transactions_RegDocs", new System.Data.DataColumn[] {
                        this.tableRegDocs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.RegDoc_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_RegDocs);
            this.relationFK_Transactions_Regs_Cr = new System.Data.DataRelation("FK_Transactions_Regs_Cr", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.cr_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_Regs_Cr);
            this.relationFK_Transactions_Regs_Dt = new System.Data.DataRelation("FK_Transactions_Regs_Dt", new System.Data.DataColumn[] {
                        this.tableRegs.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.dt_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_Regs_Dt);
            this.relationFK_Transactions_TransTypes = new System.Data.DataRelation("FK_Transactions_TransTypes", new System.Data.DataColumn[] {
                        this.tableTransTypes.idColumn}, new System.Data.DataColumn[] {
                        this.tableTransactions.Type_idColumn}, false);
            this.Relations.Add(this.relationFK_Transactions_TransTypes);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_treeBaseAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_treeCards() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_treeClients() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_treeExtAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_treeOperations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseAccount_Cards() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseCharts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCards() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCardTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClient_RegDocs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClients() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientsFL() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientsPF() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientsUL() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtAccount_Cards() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtCharts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelinkAccounts() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMyTestDocument() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperation_Details() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegDocs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegDocTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegs_Details() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransactions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransTypes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Global ds = new Global();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void _treeBaseAccountsRowChangeEventHandler(object sender, _treeBaseAccountsRowChangeEvent e);
        
        public delegate void _treeCardsRowChangeEventHandler(object sender, _treeCardsRowChangeEvent e);
        
        public delegate void _treeClientsRowChangeEventHandler(object sender, _treeClientsRowChangeEvent e);
        
        public delegate void _treeExtAccountsRowChangeEventHandler(object sender, _treeExtAccountsRowChangeEvent e);
        
        public delegate void _treeOperationsRowChangeEventHandler(object sender, _treeOperationsRowChangeEvent e);
        
        public delegate void BaseAccount_CardsRowChangeEventHandler(object sender, BaseAccount_CardsRowChangeEvent e);
        
        public delegate void BaseAccountsRowChangeEventHandler(object sender, BaseAccountsRowChangeEvent e);
        
        public delegate void BaseChartsRowChangeEventHandler(object sender, BaseChartsRowChangeEvent e);
        
        public delegate void CardsRowChangeEventHandler(object sender, CardsRowChangeEvent e);
        
        public delegate void CardTypesRowChangeEventHandler(object sender, CardTypesRowChangeEvent e);
        
        public delegate void Client_RegDocsRowChangeEventHandler(object sender, Client_RegDocsRowChangeEvent e);
        
        public delegate void ClientsRowChangeEventHandler(object sender, ClientsRowChangeEvent e);
        
        public delegate void ClientsFLRowChangeEventHandler(object sender, ClientsFLRowChangeEvent e);
        
        public delegate void ClientsPFRowChangeEventHandler(object sender, ClientsPFRowChangeEvent e);
        
        public delegate void ClientsULRowChangeEventHandler(object sender, ClientsULRowChangeEvent e);
        
        public delegate void ExtAccount_CardsRowChangeEventHandler(object sender, ExtAccount_CardsRowChangeEvent e);
        
        public delegate void ExtAccountsRowChangeEventHandler(object sender, ExtAccountsRowChangeEvent e);
        
        public delegate void ExtChartsRowChangeEventHandler(object sender, ExtChartsRowChangeEvent e);
        
        public delegate void linkAccountsRowChangeEventHandler(object sender, linkAccountsRowChangeEvent e);
        
        public delegate void MyTestDocumentRowChangeEventHandler(object sender, MyTestDocumentRowChangeEvent e);
        
        public delegate void Operation_DetailsRowChangeEventHandler(object sender, Operation_DetailsRowChangeEvent e);
        
        public delegate void OperationsRowChangeEventHandler(object sender, OperationsRowChangeEvent e);
        
        public delegate void RegDocsRowChangeEventHandler(object sender, RegDocsRowChangeEvent e);
        
        public delegate void RegDocTypesRowChangeEventHandler(object sender, RegDocTypesRowChangeEvent e);
        
        public delegate void RegsRowChangeEventHandler(object sender, RegsRowChangeEvent e);
        
        public delegate void Regs_DetailsRowChangeEventHandler(object sender, Regs_DetailsRowChangeEvent e);
        
        public delegate void TransactionsRowChangeEventHandler(object sender, TransactionsRowChangeEvent e);
        
        public delegate void TransTypesRowChangeEventHandler(object sender, TransTypesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _treeBaseAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsDataTable() {
                this.TableName = "_treeBaseAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeBaseAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _treeBaseAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow this[int index] {
                get {
                    return ((_treeBaseAccountsRow)(this.Rows[index]));
                }
            }
            
            public event _treeBaseAccountsRowChangeEventHandler _treeBaseAccountsRowChanging;
            
            public event _treeBaseAccountsRowChangeEventHandler _treeBaseAccountsRowChanged;
            
            public event _treeBaseAccountsRowChangeEventHandler _treeBaseAccountsRowDeleting;
            
            public event _treeBaseAccountsRowChangeEventHandler _treeBaseAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_treeBaseAccountsRow(_treeBaseAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow Add_treeBaseAccountsRow(string FP, _treeBaseAccountsRow parent_treeBaseAccountsRowByFK_treeBaseAccounts_treeBaseAccounts1, string Name) {
                _treeBaseAccountsRow row_treeBaseAccountsRow = ((_treeBaseAccountsRow)(this.NewRow()));
                row_treeBaseAccountsRow.ItemArray = new object[] {
                        null,
                        FP,
                        parent_treeBaseAccountsRowByFK_treeBaseAccounts_treeBaseAccounts1[1],
                        Name};
                this.Rows.Add(row_treeBaseAccountsRow);
                return row_treeBaseAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _treeBaseAccountsDataTable cln = ((_treeBaseAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _treeBaseAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnFP}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnFP.AllowDBNull = false;
                this.columnFP.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow New_treeBaseAccountsRow() {
                return ((_treeBaseAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _treeBaseAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_treeBaseAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._treeBaseAccountsRowChanged != null)) {
                    this._treeBaseAccountsRowChanged(this, new _treeBaseAccountsRowChangeEvent(((_treeBaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._treeBaseAccountsRowChanging != null)) {
                    this._treeBaseAccountsRowChanging(this, new _treeBaseAccountsRowChangeEvent(((_treeBaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._treeBaseAccountsRowDeleted != null)) {
                    this._treeBaseAccountsRowDeleted(this, new _treeBaseAccountsRowChangeEvent(((_treeBaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._treeBaseAccountsRowDeleting != null)) {
                    this._treeBaseAccountsRowDeleting(this, new _treeBaseAccountsRowChangeEvent(((_treeBaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_treeBaseAccountsRow(_treeBaseAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_treeBaseAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _treeCardsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsDataTable() {
                this.TableName = "_treeCards";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeCardsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _treeCardsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow this[int index] {
                get {
                    return ((_treeCardsRow)(this.Rows[index]));
                }
            }
            
            public event _treeCardsRowChangeEventHandler _treeCardsRowChanging;
            
            public event _treeCardsRowChangeEventHandler _treeCardsRowChanged;
            
            public event _treeCardsRowChangeEventHandler _treeCardsRowDeleting;
            
            public event _treeCardsRowChangeEventHandler _treeCardsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_treeCardsRow(_treeCardsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow Add_treeCardsRow(string FP, _treeCardsRow parent_treeCardsRowByFK_treeCards_treeCards1, string Name) {
                _treeCardsRow row_treeCardsRow = ((_treeCardsRow)(this.NewRow()));
                row_treeCardsRow.ItemArray = new object[] {
                        null,
                        FP,
                        parent_treeCardsRowByFK_treeCards_treeCards1[1],
                        Name};
                this.Rows.Add(row_treeCardsRow);
                return row_treeCardsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _treeCardsDataTable cln = ((_treeCardsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _treeCardsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnFP}, false));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint3", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnFP.AllowDBNull = false;
                this.columnFP.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow New_treeCardsRow() {
                return ((_treeCardsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _treeCardsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_treeCardsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._treeCardsRowChanged != null)) {
                    this._treeCardsRowChanged(this, new _treeCardsRowChangeEvent(((_treeCardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._treeCardsRowChanging != null)) {
                    this._treeCardsRowChanging(this, new _treeCardsRowChangeEvent(((_treeCardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._treeCardsRowDeleted != null)) {
                    this._treeCardsRowDeleted(this, new _treeCardsRowChangeEvent(((_treeCardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._treeCardsRowDeleting != null)) {
                    this._treeCardsRowDeleting(this, new _treeCardsRowChangeEvent(((_treeCardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_treeCardsRow(_treeCardsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_treeCardsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _treeClientsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsDataTable() {
                this.TableName = "_treeClients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeClientsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _treeClientsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow this[int index] {
                get {
                    return ((_treeClientsRow)(this.Rows[index]));
                }
            }
            
            public event _treeClientsRowChangeEventHandler _treeClientsRowChanging;
            
            public event _treeClientsRowChangeEventHandler _treeClientsRowChanged;
            
            public event _treeClientsRowChangeEventHandler _treeClientsRowDeleting;
            
            public event _treeClientsRowChangeEventHandler _treeClientsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_treeClientsRow(_treeClientsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow Add_treeClientsRow(string FP, _treeClientsRow parent_treeClientsRowByFK_treeClients_treeClients, string Name) {
                _treeClientsRow row_treeClientsRow = ((_treeClientsRow)(this.NewRow()));
                row_treeClientsRow.ItemArray = new object[] {
                        null,
                        FP,
                        parent_treeClientsRowByFK_treeClients_treeClients[1],
                        Name};
                this.Rows.Add(row_treeClientsRow);
                return row_treeClientsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _treeClientsDataTable cln = ((_treeClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _treeClientsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnFP}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnFP.AllowDBNull = false;
                this.columnFP.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow New_treeClientsRow() {
                return ((_treeClientsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _treeClientsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_treeClientsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._treeClientsRowChanged != null)) {
                    this._treeClientsRowChanged(this, new _treeClientsRowChangeEvent(((_treeClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._treeClientsRowChanging != null)) {
                    this._treeClientsRowChanging(this, new _treeClientsRowChangeEvent(((_treeClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._treeClientsRowDeleted != null)) {
                    this._treeClientsRowDeleted(this, new _treeClientsRowChangeEvent(((_treeClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._treeClientsRowDeleting != null)) {
                    this._treeClientsRowDeleting(this, new _treeClientsRowChangeEvent(((_treeClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_treeClientsRow(_treeClientsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_treeClientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _treeExtAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsDataTable() {
                this.TableName = "_treeExtAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeExtAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _treeExtAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow this[int index] {
                get {
                    return ((_treeExtAccountsRow)(this.Rows[index]));
                }
            }
            
            public event _treeExtAccountsRowChangeEventHandler _treeExtAccountsRowChanging;
            
            public event _treeExtAccountsRowChangeEventHandler _treeExtAccountsRowChanged;
            
            public event _treeExtAccountsRowChangeEventHandler _treeExtAccountsRowDeleting;
            
            public event _treeExtAccountsRowChangeEventHandler _treeExtAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_treeExtAccountsRow(_treeExtAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow Add_treeExtAccountsRow(string FP, _treeExtAccountsRow parent_treeExtAccountsRowByFK_treeExtAccounts_treeExtAccounts1, string Name) {
                _treeExtAccountsRow row_treeExtAccountsRow = ((_treeExtAccountsRow)(this.NewRow()));
                row_treeExtAccountsRow.ItemArray = new object[] {
                        null,
                        FP,
                        parent_treeExtAccountsRowByFK_treeExtAccounts_treeExtAccounts1[1],
                        Name};
                this.Rows.Add(row_treeExtAccountsRow);
                return row_treeExtAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _treeExtAccountsDataTable cln = ((_treeExtAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _treeExtAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnFP}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnFP.AllowDBNull = false;
                this.columnFP.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow New_treeExtAccountsRow() {
                return ((_treeExtAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _treeExtAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_treeExtAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._treeExtAccountsRowChanged != null)) {
                    this._treeExtAccountsRowChanged(this, new _treeExtAccountsRowChangeEvent(((_treeExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._treeExtAccountsRowChanging != null)) {
                    this._treeExtAccountsRowChanging(this, new _treeExtAccountsRowChangeEvent(((_treeExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._treeExtAccountsRowDeleted != null)) {
                    this._treeExtAccountsRowDeleted(this, new _treeExtAccountsRowChangeEvent(((_treeExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._treeExtAccountsRowDeleting != null)) {
                    this._treeExtAccountsRowDeleting(this, new _treeExtAccountsRowChangeEvent(((_treeExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_treeExtAccountsRow(_treeExtAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_treeExtAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _treeOperationsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsDataTable() {
                this.TableName = "_treeOperations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeOperationsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _treeOperationsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow this[int index] {
                get {
                    return ((_treeOperationsRow)(this.Rows[index]));
                }
            }
            
            public event _treeOperationsRowChangeEventHandler _treeOperationsRowChanging;
            
            public event _treeOperationsRowChangeEventHandler _treeOperationsRowChanged;
            
            public event _treeOperationsRowChangeEventHandler _treeOperationsRowDeleting;
            
            public event _treeOperationsRowChangeEventHandler _treeOperationsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_treeOperationsRow(_treeOperationsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow Add_treeOperationsRow(string FP, _treeOperationsRow parent_treeOperationsRowByFK_treeOperations_parent, string Name) {
                _treeOperationsRow row_treeOperationsRow = ((_treeOperationsRow)(this.NewRow()));
                row_treeOperationsRow.ItemArray = new object[] {
                        null,
                        FP,
                        parent_treeOperationsRowByFK_treeOperations_parent[1],
                        Name};
                this.Rows.Add(row_treeOperationsRow);
                return row_treeOperationsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _treeOperationsDataTable cln = ((_treeOperationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _treeOperationsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint2", new System.Data.DataColumn[] {
                                this.columnFP}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnFP.AllowDBNull = false;
                this.columnFP.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow New_treeOperationsRow() {
                return ((_treeOperationsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _treeOperationsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_treeOperationsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._treeOperationsRowChanged != null)) {
                    this._treeOperationsRowChanged(this, new _treeOperationsRowChangeEvent(((_treeOperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._treeOperationsRowChanging != null)) {
                    this._treeOperationsRowChanging(this, new _treeOperationsRowChangeEvent(((_treeOperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._treeOperationsRowDeleted != null)) {
                    this._treeOperationsRowDeleted(this, new _treeOperationsRowChangeEvent(((_treeOperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._treeOperationsRowDeleting != null)) {
                    this._treeOperationsRowDeleting(this, new _treeOperationsRowChangeEvent(((_treeOperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_treeOperationsRow(_treeOperationsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_treeOperationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseAccount_CardsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnHeader_id;
            
            private System.Data.DataColumn columnCardType_id;
            
            private System.Data.DataColumn columnTreeCard_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsDataTable() {
                this.TableName = "BaseAccount_Cards";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseAccount_CardsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseAccount_CardsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Header_idColumn {
                get {
                    return this.columnHeader_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardType_idColumn {
                get {
                    return this.columnCardType_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TreeCard_idColumn {
                get {
                    return this.columnTreeCard_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow this[int index] {
                get {
                    return ((BaseAccount_CardsRow)(this.Rows[index]));
                }
            }
            
            public event BaseAccount_CardsRowChangeEventHandler BaseAccount_CardsRowChanging;
            
            public event BaseAccount_CardsRowChangeEventHandler BaseAccount_CardsRowChanged;
            
            public event BaseAccount_CardsRowChangeEventHandler BaseAccount_CardsRowDeleting;
            
            public event BaseAccount_CardsRowChangeEventHandler BaseAccount_CardsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseAccount_CardsRow(BaseAccount_CardsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow AddBaseAccount_CardsRow(BaseAccountsRow parentBaseAccountsRowByFK_BaseAccount_Cards_BaseAccounts, CardTypesRow parentCardTypesRowByFK_BaseAccount_Cards_CardTypes, _treeCardsRow parent_treeCardsRowByFK_BaseAccount_Cards_treeCards) {
                BaseAccount_CardsRow rowBaseAccount_CardsRow = ((BaseAccount_CardsRow)(this.NewRow()));
                rowBaseAccount_CardsRow.ItemArray = new object[] {
                        null,
                        parentBaseAccountsRowByFK_BaseAccount_Cards_BaseAccounts[0],
                        parentCardTypesRowByFK_BaseAccount_Cards_CardTypes[0],
                        parent_treeCardsRowByFK_BaseAccount_Cards_treeCards[0]};
                this.Rows.Add(rowBaseAccount_CardsRow);
                return rowBaseAccount_CardsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseAccount_CardsDataTable cln = ((BaseAccount_CardsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseAccount_CardsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnHeader_id = base.Columns["Header_id"];
                this.columnCardType_id = base.Columns["CardType_id"];
                this.columnTreeCard_id = base.Columns["TreeCard_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnHeader_id = new System.Data.DataColumn("Header_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader_id);
                this.columnCardType_id = new System.Data.DataColumn("CardType_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardType_id);
                this.columnTreeCard_id = new System.Data.DataColumn("TreeCard_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreeCard_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnHeader_id.AllowDBNull = false;
                this.columnCardType_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow NewBaseAccount_CardsRow() {
                return ((BaseAccount_CardsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseAccount_CardsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseAccount_CardsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseAccount_CardsRowChanged != null)) {
                    this.BaseAccount_CardsRowChanged(this, new BaseAccount_CardsRowChangeEvent(((BaseAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseAccount_CardsRowChanging != null)) {
                    this.BaseAccount_CardsRowChanging(this, new BaseAccount_CardsRowChangeEvent(((BaseAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseAccount_CardsRowDeleted != null)) {
                    this.BaseAccount_CardsRowDeleted(this, new BaseAccount_CardsRowChangeEvent(((BaseAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseAccount_CardsRowDeleting != null)) {
                    this.BaseAccount_CardsRowDeleting(this, new BaseAccount_CardsRowChangeEvent(((BaseAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseAccount_CardsRow(BaseAccount_CardsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseAccount_CardsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsDataTable() {
                this.TableName = "BaseAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow this[int index] {
                get {
                    return ((BaseAccountsRow)(this.Rows[index]));
                }
            }
            
            public event BaseAccountsRowChangeEventHandler BaseAccountsRowChanging;
            
            public event BaseAccountsRowChangeEventHandler BaseAccountsRowChanged;
            
            public event BaseAccountsRowChangeEventHandler BaseAccountsRowDeleting;
            
            public event BaseAccountsRowChangeEventHandler BaseAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseAccountsRow(BaseAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow AddBaseAccountsRow(_treeBaseAccountsRow parent_treeBaseAccountsRowByFK_BaseAccounts_treeBaseAccounts1, int Code, string Name) {
                BaseAccountsRow rowBaseAccountsRow = ((BaseAccountsRow)(this.NewRow()));
                rowBaseAccountsRow.ItemArray = new object[] {
                        null,
                        parent_treeBaseAccountsRowByFK_BaseAccounts_treeBaseAccounts1[1],
                        Code,
                        Name};
                this.Rows.Add(rowBaseAccountsRow);
                return rowBaseAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseAccountsDataTable cln = ((BaseAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnCode = new System.Data.DataColumn("Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnParent_FP.AllowDBNull = false;
                this.columnCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow NewBaseAccountsRow() {
                return ((BaseAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseAccountsRowChanged != null)) {
                    this.BaseAccountsRowChanged(this, new BaseAccountsRowChangeEvent(((BaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseAccountsRowChanging != null)) {
                    this.BaseAccountsRowChanging(this, new BaseAccountsRowChangeEvent(((BaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseAccountsRowDeleted != null)) {
                    this.BaseAccountsRowDeleted(this, new BaseAccountsRowChangeEvent(((BaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseAccountsRowDeleting != null)) {
                    this.BaseAccountsRowDeleting(this, new BaseAccountsRowChangeEvent(((BaseAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseAccountsRow(BaseAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseChartsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsDataTable() {
                this.TableName = "BaseCharts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseChartsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseChartsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow this[int index] {
                get {
                    return ((BaseChartsRow)(this.Rows[index]));
                }
            }
            
            public event BaseChartsRowChangeEventHandler BaseChartsRowChanging;
            
            public event BaseChartsRowChangeEventHandler BaseChartsRowChanged;
            
            public event BaseChartsRowChangeEventHandler BaseChartsRowDeleting;
            
            public event BaseChartsRowChangeEventHandler BaseChartsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseChartsRow(BaseChartsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow AddBaseChartsRow(_treeBaseAccountsRow parent_treeBaseAccountsRowByFK_BaseCharts_treeBaseAccounts, string Name) {
                BaseChartsRow rowBaseChartsRow = ((BaseChartsRow)(this.NewRow()));
                rowBaseChartsRow.ItemArray = new object[] {
                        null,
                        parent_treeBaseAccountsRowByFK_BaseCharts_treeBaseAccounts[1],
                        Name};
                this.Rows.Add(rowBaseChartsRow);
                return rowBaseChartsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseChartsDataTable cln = ((BaseChartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseChartsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnFP.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow NewBaseChartsRow() {
                return ((BaseChartsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseChartsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseChartsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseChartsRowChanged != null)) {
                    this.BaseChartsRowChanged(this, new BaseChartsRowChangeEvent(((BaseChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseChartsRowChanging != null)) {
                    this.BaseChartsRowChanging(this, new BaseChartsRowChangeEvent(((BaseChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseChartsRowDeleted != null)) {
                    this.BaseChartsRowDeleted(this, new BaseChartsRowChangeEvent(((BaseChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseChartsRowDeleting != null)) {
                    this.BaseChartsRowDeleting(this, new BaseChartsRowChangeEvent(((BaseChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseChartsRow(BaseChartsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseChartsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CardsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnComment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsDataTable() {
                this.TableName = "Cards";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CardsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow this[int index] {
                get {
                    return ((CardsRow)(this.Rows[index]));
                }
            }
            
            public event CardsRowChangeEventHandler CardsRowChanging;
            
            public event CardsRowChangeEventHandler CardsRowChanged;
            
            public event CardsRowChangeEventHandler CardsRowDeleting;
            
            public event CardsRowChangeEventHandler CardsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCardsRow(CardsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow AddCardsRow(_treeCardsRow parent_treeCardsRowByFK_Cards_treeCards1, int Code, string Name, string Comment) {
                CardsRow rowCardsRow = ((CardsRow)(this.NewRow()));
                rowCardsRow.ItemArray = new object[] {
                        null,
                        parent_treeCardsRowByFK_Cards_treeCards1[1],
                        Code,
                        Name,
                        Comment};
                this.Rows.Add(rowCardsRow);
                return rowCardsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CardsDataTable cln = ((CardsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CardsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnCode = new System.Data.DataColumn("Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnParent_FP.AllowDBNull = false;
                this.columnCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow NewCardsRow() {
                return ((CardsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CardsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CardsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardsRowChanged != null)) {
                    this.CardsRowChanged(this, new CardsRowChangeEvent(((CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardsRowChanging != null)) {
                    this.CardsRowChanging(this, new CardsRowChangeEvent(((CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardsRowDeleted != null)) {
                    this.CardsRowDeleted(this, new CardsRowChangeEvent(((CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardsRowDeleting != null)) {
                    this.CardsRowDeleting(this, new CardsRowChangeEvent(((CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCardsRow(CardsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CardsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CardTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnhasAmount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesDataTable() {
                this.TableName = "CardTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CardTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hasAmountColumn {
                get {
                    return this.columnhasAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow this[int index] {
                get {
                    return ((CardTypesRow)(this.Rows[index]));
                }
            }
            
            public event CardTypesRowChangeEventHandler CardTypesRowChanging;
            
            public event CardTypesRowChangeEventHandler CardTypesRowChanged;
            
            public event CardTypesRowChangeEventHandler CardTypesRowDeleting;
            
            public event CardTypesRowChangeEventHandler CardTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCardTypesRow(CardTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow AddCardTypesRow(_treeCardsRow parent_treeCardsRowByFK_CardTypes_treeCards, string Name, bool hasAmount) {
                CardTypesRow rowCardTypesRow = ((CardTypesRow)(this.NewRow()));
                rowCardTypesRow.ItemArray = new object[] {
                        null,
                        parent_treeCardsRowByFK_CardTypes_treeCards[1],
                        Name,
                        hasAmount};
                this.Rows.Add(rowCardTypesRow);
                return rowCardTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CardTypesDataTable cln = ((CardTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CardTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnName = base.Columns["Name"];
                this.columnhasAmount = base.Columns["hasAmount"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnhasAmount = new System.Data.DataColumn("hasAmount", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhasAmount);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnFP.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnhasAmount.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow NewCardTypesRow() {
                return ((CardTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CardTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CardTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CardTypesRowChanged != null)) {
                    this.CardTypesRowChanged(this, new CardTypesRowChangeEvent(((CardTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CardTypesRowChanging != null)) {
                    this.CardTypesRowChanging(this, new CardTypesRowChangeEvent(((CardTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CardTypesRowDeleted != null)) {
                    this.CardTypesRowDeleted(this, new CardTypesRowChangeEvent(((CardTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CardTypesRowDeleting != null)) {
                    this.CardTypesRowDeleting(this, new CardTypesRowChangeEvent(((CardTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCardTypesRow(CardTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CardTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Client_RegDocsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnHeader_id;
            
            private System.Data.DataColumn columnClient_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsDataTable() {
                this.TableName = "Client_RegDocs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Client_RegDocsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Client_RegDocsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Header_idColumn {
                get {
                    return this.columnHeader_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Client_idColumn {
                get {
                    return this.columnClient_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow this[int index] {
                get {
                    return ((Client_RegDocsRow)(this.Rows[index]));
                }
            }
            
            public event Client_RegDocsRowChangeEventHandler Client_RegDocsRowChanging;
            
            public event Client_RegDocsRowChangeEventHandler Client_RegDocsRowChanged;
            
            public event Client_RegDocsRowChangeEventHandler Client_RegDocsRowDeleting;
            
            public event Client_RegDocsRowChangeEventHandler Client_RegDocsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClient_RegDocsRow(Client_RegDocsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow AddClient_RegDocsRow(RegDocsRow parentRegDocsRowByFK_Client_RegDocs_RegDocs, ClientsRow parentClientsRowByFK_Client_RegDocs_Clients) {
                Client_RegDocsRow rowClient_RegDocsRow = ((Client_RegDocsRow)(this.NewRow()));
                rowClient_RegDocsRow.ItemArray = new object[] {
                        null,
                        parentRegDocsRowByFK_Client_RegDocs_RegDocs[0],
                        parentClientsRowByFK_Client_RegDocs_Clients[0]};
                this.Rows.Add(rowClient_RegDocsRow);
                return rowClient_RegDocsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Client_RegDocsDataTable cln = ((Client_RegDocsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Client_RegDocsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnHeader_id = base.Columns["Header_id"];
                this.columnClient_id = base.Columns["Client_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnHeader_id = new System.Data.DataColumn("Header_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader_id);
                this.columnClient_id = new System.Data.DataColumn("Client_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnHeader_id.AllowDBNull = false;
                this.columnClient_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow NewClient_RegDocsRow() {
                return ((Client_RegDocsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Client_RegDocsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Client_RegDocsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Client_RegDocsRowChanged != null)) {
                    this.Client_RegDocsRowChanged(this, new Client_RegDocsRowChangeEvent(((Client_RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Client_RegDocsRowChanging != null)) {
                    this.Client_RegDocsRowChanging(this, new Client_RegDocsRowChangeEvent(((Client_RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Client_RegDocsRowDeleted != null)) {
                    this.Client_RegDocsRowDeleted(this, new Client_RegDocsRowChangeEvent(((Client_RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Client_RegDocsRowDeleting != null)) {
                    this.Client_RegDocsRowDeleting(this, new Client_RegDocsRowChangeEvent(((Client_RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClient_RegDocsRow(Client_RegDocsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Client_RegDocsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnSCode;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnComment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsDataTable() {
                this.TableName = "Clients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCodeColumn {
                get {
                    return this.columnSCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow this[int index] {
                get {
                    return ((ClientsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRowChangeEventHandler ClientsRowChanging;
            
            public event ClientsRowChangeEventHandler ClientsRowChanged;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleting;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsRow(ClientsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow AddClientsRow(_treeClientsRow parent_treeClientsRowByFK_Clients_Clients, int Code, string SCode, string Name, string Comment) {
                ClientsRow rowClientsRow = ((ClientsRow)(this.NewRow()));
                rowClientsRow.ItemArray = new object[] {
                        null,
                        parent_treeClientsRowByFK_Clients_Clients[1],
                        Code,
                        SCode,
                        Name,
                        Comment};
                this.Rows.Add(rowClientsRow);
                return rowClientsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClientsDataTable cln = ((ClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClientsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnCode = base.Columns["Code"];
                this.columnSCode = base.Columns["SCode"];
                this.columnName = base.Columns["Name"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnCode = new System.Data.DataColumn("Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnSCode = new System.Data.DataColumn("SCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnParent_FP.AllowDBNull = false;
                this.columnCode.AllowDBNull = false;
                this.columnSCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow NewClientsRow() {
                return ((ClientsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClientsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClientsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRowChanged != null)) {
                    this.ClientsRowChanged(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRowChanging != null)) {
                    this.ClientsRowChanging(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRowDeleted != null)) {
                    this.ClientsRowDeleted(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRowDeleting != null)) {
                    this.ClientsRowDeleting(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsRow(ClientsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsFLDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnBirthDate;
            
            private System.Data.DataColumn columnBirthPlace;
            
            private System.Data.DataColumn columnDoc_Name;
            
            private System.Data.DataColumn columnDoc_Seria;
            
            private System.Data.DataColumn columnDoc_Number;
            
            private System.Data.DataColumn columnDoc_WhenIssued;
            
            private System.Data.DataColumn columnDoc_Issuer;
            
            private System.Data.DataColumn columnsysDate;
            
            private System.Data.DataColumn columnsysUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLDataTable() {
                this.TableName = "ClientsFL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsFLDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsFLDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BirthPlaceColumn {
                get {
                    return this.columnBirthPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Doc_NameColumn {
                get {
                    return this.columnDoc_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Doc_SeriaColumn {
                get {
                    return this.columnDoc_Seria;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Doc_NumberColumn {
                get {
                    return this.columnDoc_Number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Doc_WhenIssuedColumn {
                get {
                    return this.columnDoc_WhenIssued;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Doc_IssuerColumn {
                get {
                    return this.columnDoc_Issuer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRow this[int index] {
                get {
                    return ((ClientsFLRow)(this.Rows[index]));
                }
            }
            
            public event ClientsFLRowChangeEventHandler ClientsFLRowChanging;
            
            public event ClientsFLRowChangeEventHandler ClientsFLRowChanged;
            
            public event ClientsFLRowChangeEventHandler ClientsFLRowDeleting;
            
            public event ClientsFLRowChangeEventHandler ClientsFLRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsFLRow(ClientsFLRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRow AddClientsFLRow(ClientsRow parentClientsRowByFK_ClientsFIZ_Clients, string FullName, System.DateTime BirthDate, string BirthPlace, string Doc_Name, string Doc_Seria, string Doc_Number, System.DateTime Doc_WhenIssued, string Doc_Issuer, System.DateTime sysDate, string sysUser) {
                ClientsFLRow rowClientsFLRow = ((ClientsFLRow)(this.NewRow()));
                rowClientsFLRow.ItemArray = new object[] {
                        parentClientsRowByFK_ClientsFIZ_Clients[0],
                        FullName,
                        BirthDate,
                        BirthPlace,
                        Doc_Name,
                        Doc_Seria,
                        Doc_Number,
                        Doc_WhenIssued,
                        Doc_Issuer,
                        sysDate,
                        sysUser};
                this.Rows.Add(rowClientsFLRow);
                return rowClientsFLRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClientsFLDataTable cln = ((ClientsFLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClientsFLDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFullName = base.Columns["FullName"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnBirthPlace = base.Columns["BirthPlace"];
                this.columnDoc_Name = base.Columns["Doc_Name"];
                this.columnDoc_Seria = base.Columns["Doc_Seria"];
                this.columnDoc_Number = base.Columns["Doc_Number"];
                this.columnDoc_WhenIssued = base.Columns["Doc_WhenIssued"];
                this.columnDoc_Issuer = base.Columns["Doc_Issuer"];
                this.columnsysDate = base.Columns["sysDate"];
                this.columnsysUser = base.Columns["sysUser"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnBirthDate = new System.Data.DataColumn("BirthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthDate);
                this.columnBirthPlace = new System.Data.DataColumn("BirthPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBirthPlace);
                this.columnDoc_Name = new System.Data.DataColumn("Doc_Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoc_Name);
                this.columnDoc_Seria = new System.Data.DataColumn("Doc_Seria", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoc_Seria);
                this.columnDoc_Number = new System.Data.DataColumn("Doc_Number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoc_Number);
                this.columnDoc_WhenIssued = new System.Data.DataColumn("Doc_WhenIssued", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoc_WhenIssued);
                this.columnDoc_Issuer = new System.Data.DataColumn("Doc_Issuer", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDoc_Issuer);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnid.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRow NewClientsFLRow() {
                return ((ClientsFLRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClientsFLRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClientsFLRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsFLRowChanged != null)) {
                    this.ClientsFLRowChanged(this, new ClientsFLRowChangeEvent(((ClientsFLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsFLRowChanging != null)) {
                    this.ClientsFLRowChanging(this, new ClientsFLRowChangeEvent(((ClientsFLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsFLRowDeleted != null)) {
                    this.ClientsFLRowDeleted(this, new ClientsFLRowChangeEvent(((ClientsFLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsFLRowDeleting != null)) {
                    this.ClientsFLRowDeleting(this, new ClientsFLRowChangeEvent(((ClientsFLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsFLRow(ClientsFLRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsFLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsPFDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnRegDate;
            
            private System.Data.DataColumn columnRegPlace;
            
            private System.Data.DataColumn columnsysDate;
            
            private System.Data.DataColumn columnsysUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFDataTable() {
                this.TableName = "ClientsPF";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsPFDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsPFDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegPlaceColumn {
                get {
                    return this.columnRegPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRow this[int index] {
                get {
                    return ((ClientsPFRow)(this.Rows[index]));
                }
            }
            
            public event ClientsPFRowChangeEventHandler ClientsPFRowChanging;
            
            public event ClientsPFRowChangeEventHandler ClientsPFRowChanged;
            
            public event ClientsPFRowChangeEventHandler ClientsPFRowDeleting;
            
            public event ClientsPFRowChangeEventHandler ClientsPFRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsPFRow(ClientsPFRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRow AddClientsPFRow(ClientsRow parentClientsRowByFK_ClientsNPF_Clients, string FullName, System.DateTime RegDate, string RegPlace, System.DateTime sysDate, string sysUser) {
                ClientsPFRow rowClientsPFRow = ((ClientsPFRow)(this.NewRow()));
                rowClientsPFRow.ItemArray = new object[] {
                        parentClientsRowByFK_ClientsNPF_Clients[0],
                        FullName,
                        RegDate,
                        RegPlace,
                        sysDate,
                        sysUser};
                this.Rows.Add(rowClientsPFRow);
                return rowClientsPFRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClientsPFDataTable cln = ((ClientsPFDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClientsPFDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFullName = base.Columns["FullName"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnRegPlace = base.Columns["RegPlace"];
                this.columnsysDate = base.Columns["sysDate"];
                this.columnsysUser = base.Columns["sysUser"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnRegDate = new System.Data.DataColumn("RegDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnRegPlace = new System.Data.DataColumn("RegPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegPlace);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnid.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRow NewClientsPFRow() {
                return ((ClientsPFRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClientsPFRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClientsPFRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsPFRowChanged != null)) {
                    this.ClientsPFRowChanged(this, new ClientsPFRowChangeEvent(((ClientsPFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsPFRowChanging != null)) {
                    this.ClientsPFRowChanging(this, new ClientsPFRowChangeEvent(((ClientsPFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsPFRowDeleted != null)) {
                    this.ClientsPFRowDeleted(this, new ClientsPFRowChangeEvent(((ClientsPFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsPFRowDeleting != null)) {
                    this.ClientsPFRowDeleting(this, new ClientsPFRowChangeEvent(((ClientsPFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsPFRow(ClientsPFRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsPFDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsULDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFullName;
            
            private System.Data.DataColumn columnRegDate;
            
            private System.Data.DataColumn columnRegPlace;
            
            private System.Data.DataColumn columnINN;
            
            private System.Data.DataColumn columnsysDate;
            
            private System.Data.DataColumn columnsysUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULDataTable() {
                this.TableName = "ClientsUL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsULDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsULDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegPlaceColumn {
                get {
                    return this.columnRegPlace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn INNColumn {
                get {
                    return this.columnINN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRow this[int index] {
                get {
                    return ((ClientsULRow)(this.Rows[index]));
                }
            }
            
            public event ClientsULRowChangeEventHandler ClientsULRowChanging;
            
            public event ClientsULRowChangeEventHandler ClientsULRowChanged;
            
            public event ClientsULRowChangeEventHandler ClientsULRowDeleting;
            
            public event ClientsULRowChangeEventHandler ClientsULRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsULRow(ClientsULRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRow AddClientsULRow(ClientsRow parentClientsRowByFK_ClientsJUR_Clients, string FullName, System.DateTime RegDate, string RegPlace, string INN, System.DateTime sysDate, string sysUser) {
                ClientsULRow rowClientsULRow = ((ClientsULRow)(this.NewRow()));
                rowClientsULRow.ItemArray = new object[] {
                        parentClientsRowByFK_ClientsJUR_Clients[0],
                        FullName,
                        RegDate,
                        RegPlace,
                        INN,
                        sysDate,
                        sysUser};
                this.Rows.Add(rowClientsULRow);
                return rowClientsULRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClientsULDataTable cln = ((ClientsULDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClientsULDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFullName = base.Columns["FullName"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnRegPlace = base.Columns["RegPlace"];
                this.columnINN = base.Columns["INN"];
                this.columnsysDate = base.Columns["sysDate"];
                this.columnsysUser = base.Columns["sysUser"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFullName = new System.Data.DataColumn("FullName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnRegDate = new System.Data.DataColumn("RegDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnRegPlace = new System.Data.DataColumn("RegPlace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegPlace);
                this.columnINN = new System.Data.DataColumn("INN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnINN);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnid.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRow NewClientsULRow() {
                return ((ClientsULRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClientsULRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClientsULRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsULRowChanged != null)) {
                    this.ClientsULRowChanged(this, new ClientsULRowChangeEvent(((ClientsULRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsULRowChanging != null)) {
                    this.ClientsULRowChanging(this, new ClientsULRowChangeEvent(((ClientsULRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsULRowDeleted != null)) {
                    this.ClientsULRowDeleted(this, new ClientsULRowChangeEvent(((ClientsULRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsULRowDeleting != null)) {
                    this.ClientsULRowDeleting(this, new ClientsULRowChangeEvent(((ClientsULRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsULRow(ClientsULRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsULDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtAccount_CardsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnHeader_id;
            
            private System.Data.DataColumn columnCardType_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsDataTable() {
                this.TableName = "ExtAccount_Cards";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtAccount_CardsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtAccount_CardsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Header_idColumn {
                get {
                    return this.columnHeader_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CardType_idColumn {
                get {
                    return this.columnCardType_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow this[int index] {
                get {
                    return ((ExtAccount_CardsRow)(this.Rows[index]));
                }
            }
            
            public event ExtAccount_CardsRowChangeEventHandler ExtAccount_CardsRowChanging;
            
            public event ExtAccount_CardsRowChangeEventHandler ExtAccount_CardsRowChanged;
            
            public event ExtAccount_CardsRowChangeEventHandler ExtAccount_CardsRowDeleting;
            
            public event ExtAccount_CardsRowChangeEventHandler ExtAccount_CardsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtAccount_CardsRow(ExtAccount_CardsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow AddExtAccount_CardsRow(ExtAccountsRow parentExtAccountsRowByFK_ExtAccount_Cards_ExtAccounts, CardTypesRow parentCardTypesRowByFK_ExtAccount_Cards_CardTypes) {
                ExtAccount_CardsRow rowExtAccount_CardsRow = ((ExtAccount_CardsRow)(this.NewRow()));
                rowExtAccount_CardsRow.ItemArray = new object[] {
                        null,
                        parentExtAccountsRowByFK_ExtAccount_Cards_ExtAccounts[0],
                        parentCardTypesRowByFK_ExtAccount_Cards_CardTypes[0]};
                this.Rows.Add(rowExtAccount_CardsRow);
                return rowExtAccount_CardsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtAccount_CardsDataTable cln = ((ExtAccount_CardsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtAccount_CardsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnHeader_id = base.Columns["Header_id"];
                this.columnCardType_id = base.Columns["CardType_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnHeader_id = new System.Data.DataColumn("Header_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader_id);
                this.columnCardType_id = new System.Data.DataColumn("CardType_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCardType_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnHeader_id.AllowDBNull = false;
                this.columnCardType_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow NewExtAccount_CardsRow() {
                return ((ExtAccount_CardsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtAccount_CardsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtAccount_CardsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtAccount_CardsRowChanged != null)) {
                    this.ExtAccount_CardsRowChanged(this, new ExtAccount_CardsRowChangeEvent(((ExtAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtAccount_CardsRowChanging != null)) {
                    this.ExtAccount_CardsRowChanging(this, new ExtAccount_CardsRowChangeEvent(((ExtAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtAccount_CardsRowDeleted != null)) {
                    this.ExtAccount_CardsRowDeleted(this, new ExtAccount_CardsRowChangeEvent(((ExtAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtAccount_CardsRowDeleting != null)) {
                    this.ExtAccount_CardsRowDeleting(this, new ExtAccount_CardsRowChangeEvent(((ExtAccount_CardsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtAccount_CardsRow(ExtAccount_CardsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtAccount_CardsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsDataTable() {
                this.TableName = "ExtAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow this[int index] {
                get {
                    return ((ExtAccountsRow)(this.Rows[index]));
                }
            }
            
            public event ExtAccountsRowChangeEventHandler ExtAccountsRowChanging;
            
            public event ExtAccountsRowChangeEventHandler ExtAccountsRowChanged;
            
            public event ExtAccountsRowChangeEventHandler ExtAccountsRowDeleting;
            
            public event ExtAccountsRowChangeEventHandler ExtAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtAccountsRow(ExtAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow AddExtAccountsRow(_treeExtAccountsRow parent_treeExtAccountsRowByFK_ExtAccounts_treeExtAccounts1, int Code, string Name) {
                ExtAccountsRow rowExtAccountsRow = ((ExtAccountsRow)(this.NewRow()));
                rowExtAccountsRow.ItemArray = new object[] {
                        null,
                        parent_treeExtAccountsRowByFK_ExtAccounts_treeExtAccounts1[1],
                        Code,
                        Name};
                this.Rows.Add(rowExtAccountsRow);
                return rowExtAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtAccountsDataTable cln = ((ExtAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnCode = new System.Data.DataColumn("Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnParent_FP.AllowDBNull = false;
                this.columnCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow NewExtAccountsRow() {
                return ((ExtAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtAccountsRowChanged != null)) {
                    this.ExtAccountsRowChanged(this, new ExtAccountsRowChangeEvent(((ExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtAccountsRowChanging != null)) {
                    this.ExtAccountsRowChanging(this, new ExtAccountsRowChangeEvent(((ExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtAccountsRowDeleted != null)) {
                    this.ExtAccountsRowDeleted(this, new ExtAccountsRowChangeEvent(((ExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtAccountsRowDeleting != null)) {
                    this.ExtAccountsRowDeleting(this, new ExtAccountsRowChangeEvent(((ExtAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtAccountsRow(ExtAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtChartsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnFP;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnBaseChart_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsDataTable() {
                this.TableName = "ExtCharts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtChartsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtChartsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FPColumn {
                get {
                    return this.columnFP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaseChart_idColumn {
                get {
                    return this.columnBaseChart_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow this[int index] {
                get {
                    return ((ExtChartsRow)(this.Rows[index]));
                }
            }
            
            public event ExtChartsRowChangeEventHandler ExtChartsRowChanging;
            
            public event ExtChartsRowChangeEventHandler ExtChartsRowChanged;
            
            public event ExtChartsRowChangeEventHandler ExtChartsRowDeleting;
            
            public event ExtChartsRowChangeEventHandler ExtChartsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtChartsRow(ExtChartsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow AddExtChartsRow(_treeExtAccountsRow parent_treeExtAccountsRowByFK_ExtCharts_treeExtAccounts, string Name, BaseChartsRow parentBaseChartsRowByFK_ExtCharts_BaseCharts) {
                ExtChartsRow rowExtChartsRow = ((ExtChartsRow)(this.NewRow()));
                rowExtChartsRow.ItemArray = new object[] {
                        null,
                        parent_treeExtAccountsRowByFK_ExtCharts_treeExtAccounts[1],
                        Name,
                        parentBaseChartsRowByFK_ExtCharts_BaseCharts[0]};
                this.Rows.Add(rowExtChartsRow);
                return rowExtChartsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtChartsDataTable cln = ((ExtChartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtChartsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnFP = base.Columns["FP"];
                this.columnName = base.Columns["Name"];
                this.columnBaseChart_id = base.Columns["BaseChart_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnFP = new System.Data.DataColumn("FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFP);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnBaseChart_id = new System.Data.DataColumn("BaseChart_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseChart_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnFP.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow NewExtChartsRow() {
                return ((ExtChartsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtChartsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtChartsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtChartsRowChanged != null)) {
                    this.ExtChartsRowChanged(this, new ExtChartsRowChangeEvent(((ExtChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtChartsRowChanging != null)) {
                    this.ExtChartsRowChanging(this, new ExtChartsRowChangeEvent(((ExtChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtChartsRowDeleted != null)) {
                    this.ExtChartsRowDeleted(this, new ExtChartsRowChangeEvent(((ExtChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtChartsRowDeleting != null)) {
                    this.ExtChartsRowDeleting(this, new ExtChartsRowChangeEvent(((ExtChartsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtChartsRow(ExtChartsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtChartsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class linkAccountsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnBaseAccount_id;
            
            private System.Data.DataColumn columnExtChart_id;
            
            private System.Data.DataColumn columnExtAccount1_id;
            
            private System.Data.DataColumn columnExtAccount2_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsDataTable() {
                this.TableName = "linkAccounts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal linkAccountsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected linkAccountsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaseAccount_idColumn {
                get {
                    return this.columnBaseAccount_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtChart_idColumn {
                get {
                    return this.columnExtChart_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtAccount1_idColumn {
                get {
                    return this.columnExtAccount1_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtAccount2_idColumn {
                get {
                    return this.columnExtAccount2_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow this[int index] {
                get {
                    return ((linkAccountsRow)(this.Rows[index]));
                }
            }
            
            public event linkAccountsRowChangeEventHandler linkAccountsRowChanging;
            
            public event linkAccountsRowChangeEventHandler linkAccountsRowChanged;
            
            public event linkAccountsRowChangeEventHandler linkAccountsRowDeleting;
            
            public event linkAccountsRowChangeEventHandler linkAccountsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddlinkAccountsRow(linkAccountsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow AddlinkAccountsRow(BaseAccountsRow parentBaseAccountsRowByFK_linkAccounts_BaseAccounts, ExtChartsRow parentExtChartsRowByFK_linkAccounts_ExtCharts, ExtAccountsRow parentExtAccountsRowByFK_linkAccounts_ExtAccounts, ExtAccountsRow parentExtAccountsRowByFK_linkAccounts_ExtAccounts1) {
                linkAccountsRow rowlinkAccountsRow = ((linkAccountsRow)(this.NewRow()));
                rowlinkAccountsRow.ItemArray = new object[] {
                        null,
                        parentBaseAccountsRowByFK_linkAccounts_BaseAccounts[0],
                        parentExtChartsRowByFK_linkAccounts_ExtCharts[0],
                        parentExtAccountsRowByFK_linkAccounts_ExtAccounts[0],
                        parentExtAccountsRowByFK_linkAccounts_ExtAccounts1[0]};
                this.Rows.Add(rowlinkAccountsRow);
                return rowlinkAccountsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                linkAccountsDataTable cln = ((linkAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new linkAccountsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnBaseAccount_id = base.Columns["BaseAccount_id"];
                this.columnExtChart_id = base.Columns["ExtChart_id"];
                this.columnExtAccount1_id = base.Columns["ExtAccount1_id"];
                this.columnExtAccount2_id = base.Columns["ExtAccount2_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnBaseAccount_id = new System.Data.DataColumn("BaseAccount_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAccount_id);
                this.columnExtChart_id = new System.Data.DataColumn("ExtChart_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtChart_id);
                this.columnExtAccount1_id = new System.Data.DataColumn("ExtAccount1_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtAccount1_id);
                this.columnExtAccount2_id = new System.Data.DataColumn("ExtAccount2_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtAccount2_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow NewlinkAccountsRow() {
                return ((linkAccountsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new linkAccountsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(linkAccountsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.linkAccountsRowChanged != null)) {
                    this.linkAccountsRowChanged(this, new linkAccountsRowChangeEvent(((linkAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.linkAccountsRowChanging != null)) {
                    this.linkAccountsRowChanging(this, new linkAccountsRowChangeEvent(((linkAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.linkAccountsRowDeleted != null)) {
                    this.linkAccountsRowDeleted(this, new linkAccountsRowChangeEvent(((linkAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.linkAccountsRowDeleting != null)) {
                    this.linkAccountsRowDeleting(this, new linkAccountsRowChangeEvent(((linkAccountsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovelinkAccountsRow(linkAccountsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "linkAccountsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MyTestDocumentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnRegDoc_id;
            
            private System.Data.DataColumn columnDocNum;
            
            private System.Data.DataColumn columnDocDate;
            
            private System.Data.DataColumn columnClient_id;
            
            private System.Data.DataColumn columnsysUser;
            
            private System.Data.DataColumn columnsysDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentDataTable() {
                this.TableName = "MyTestDocument";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyTestDocumentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MyTestDocumentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDoc_idColumn {
                get {
                    return this.columnRegDoc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocNumColumn {
                get {
                    return this.columnDocNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DocDateColumn {
                get {
                    return this.columnDocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Client_idColumn {
                get {
                    return this.columnClient_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow this[int index] {
                get {
                    return ((MyTestDocumentRow)(this.Rows[index]));
                }
            }
            
            public event MyTestDocumentRowChangeEventHandler MyTestDocumentRowChanging;
            
            public event MyTestDocumentRowChangeEventHandler MyTestDocumentRowChanged;
            
            public event MyTestDocumentRowChangeEventHandler MyTestDocumentRowDeleting;
            
            public event MyTestDocumentRowChangeEventHandler MyTestDocumentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMyTestDocumentRow(MyTestDocumentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow AddMyTestDocumentRow(RegDocsRow parentRegDocsRowByFK_MyTestDocument_RegDocs, string DocNum, System.DateTime DocDate, ClientsRow parentClientsRowByFK_MyTestDocument_Clients, string sysUser, System.DateTime sysDate) {
                MyTestDocumentRow rowMyTestDocumentRow = ((MyTestDocumentRow)(this.NewRow()));
                rowMyTestDocumentRow.ItemArray = new object[] {
                        null,
                        parentRegDocsRowByFK_MyTestDocument_RegDocs[0],
                        DocNum,
                        DocDate,
                        parentClientsRowByFK_MyTestDocument_Clients[0],
                        sysUser,
                        sysDate};
                this.Rows.Add(rowMyTestDocumentRow);
                return rowMyTestDocumentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MyTestDocumentDataTable cln = ((MyTestDocumentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MyTestDocumentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnRegDoc_id = base.Columns["RegDoc_id"];
                this.columnDocNum = base.Columns["DocNum"];
                this.columnDocDate = base.Columns["DocDate"];
                this.columnClient_id = base.Columns["Client_id"];
                this.columnsysUser = base.Columns["sysUser"];
                this.columnsysDate = base.Columns["sysDate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnRegDoc_id = new System.Data.DataColumn("RegDoc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDoc_id);
                this.columnDocNum = new System.Data.DataColumn("DocNum", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocNum);
                this.columnDocDate = new System.Data.DataColumn("DocDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDate);
                this.columnClient_id = new System.Data.DataColumn("Client_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient_id);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnRegDoc_id.AllowDBNull = false;
                this.columnDocNum.AllowDBNull = false;
                this.columnDocDate.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow NewMyTestDocumentRow() {
                return ((MyTestDocumentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MyTestDocumentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MyTestDocumentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MyTestDocumentRowChanged != null)) {
                    this.MyTestDocumentRowChanged(this, new MyTestDocumentRowChangeEvent(((MyTestDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MyTestDocumentRowChanging != null)) {
                    this.MyTestDocumentRowChanging(this, new MyTestDocumentRowChangeEvent(((MyTestDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MyTestDocumentRowDeleted != null)) {
                    this.MyTestDocumentRowDeleted(this, new MyTestDocumentRowChangeEvent(((MyTestDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MyTestDocumentRowDeleting != null)) {
                    this.MyTestDocumentRowDeleting(this, new MyTestDocumentRowChangeEvent(((MyTestDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMyTestDocumentRow(MyTestDocumentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MyTestDocumentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Operation_DetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnHeader_id;
            
            private System.Data.DataColumn columnisDt;
            
            private System.Data.DataColumn columnTreeCard_id;
            
            private System.Data.DataColumn columnCard_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsDataTable() {
                this.TableName = "Operation_Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Operation_DetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Operation_DetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Header_idColumn {
                get {
                    return this.columnHeader_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isDtColumn {
                get {
                    return this.columnisDt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TreeCard_idColumn {
                get {
                    return this.columnTreeCard_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Card_idColumn {
                get {
                    return this.columnCard_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow this[int index] {
                get {
                    return ((Operation_DetailsRow)(this.Rows[index]));
                }
            }
            
            public event Operation_DetailsRowChangeEventHandler Operation_DetailsRowChanging;
            
            public event Operation_DetailsRowChangeEventHandler Operation_DetailsRowChanged;
            
            public event Operation_DetailsRowChangeEventHandler Operation_DetailsRowDeleting;
            
            public event Operation_DetailsRowChangeEventHandler Operation_DetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperation_DetailsRow(Operation_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow AddOperation_DetailsRow(OperationsRow parentOperationsRowByFK_Operation_Details_Operations, bool isDt, _treeCardsRow parent_treeCardsRowByFK_Operation_Details_treeCards, CardsRow parentCardsRowByFK_Operation_Details_Cards) {
                Operation_DetailsRow rowOperation_DetailsRow = ((Operation_DetailsRow)(this.NewRow()));
                rowOperation_DetailsRow.ItemArray = new object[] {
                        null,
                        parentOperationsRowByFK_Operation_Details_Operations[0],
                        isDt,
                        parent_treeCardsRowByFK_Operation_Details_treeCards[0],
                        parentCardsRowByFK_Operation_Details_Cards[0]};
                this.Rows.Add(rowOperation_DetailsRow);
                return rowOperation_DetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Operation_DetailsDataTable cln = ((Operation_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Operation_DetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnHeader_id = base.Columns["Header_id"];
                this.columnisDt = base.Columns["isDt"];
                this.columnTreeCard_id = base.Columns["TreeCard_id"];
                this.columnCard_id = base.Columns["Card_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnHeader_id = new System.Data.DataColumn("Header_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader_id);
                this.columnisDt = new System.Data.DataColumn("isDt", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisDt);
                this.columnTreeCard_id = new System.Data.DataColumn("TreeCard_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTreeCard_id);
                this.columnCard_id = new System.Data.DataColumn("Card_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCard_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnHeader_id.AllowDBNull = false;
                this.columnisDt.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow NewOperation_DetailsRow() {
                return ((Operation_DetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Operation_DetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Operation_DetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Operation_DetailsRowChanged != null)) {
                    this.Operation_DetailsRowChanged(this, new Operation_DetailsRowChangeEvent(((Operation_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Operation_DetailsRowChanging != null)) {
                    this.Operation_DetailsRowChanging(this, new Operation_DetailsRowChangeEvent(((Operation_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Operation_DetailsRowDeleted != null)) {
                    this.Operation_DetailsRowDeleted(this, new Operation_DetailsRowChangeEvent(((Operation_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Operation_DetailsRowDeleting != null)) {
                    this.Operation_DetailsRowDeleting(this, new Operation_DetailsRowChangeEvent(((Operation_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperation_DetailsRow(Operation_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Operation_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnParent_FP;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnRegDocType_id;
            
            private System.Data.DataColumn columnDt_Account_id;
            
            private System.Data.DataColumn columnCr_Account_id;
            
            private System.Data.DataColumn columnComment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataTable() {
                this.TableName = "Operations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Parent_FPColumn {
                get {
                    return this.columnParent_FP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDocType_idColumn {
                get {
                    return this.columnRegDocType_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Dt_Account_idColumn {
                get {
                    return this.columnDt_Account_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Cr_Account_idColumn {
                get {
                    return this.columnCr_Account_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow this[int index] {
                get {
                    return ((OperationsRow)(this.Rows[index]));
                }
            }
            
            public event OperationsRowChangeEventHandler OperationsRowChanging;
            
            public event OperationsRowChangeEventHandler OperationsRowChanged;
            
            public event OperationsRowChangeEventHandler OperationsRowDeleting;
            
            public event OperationsRowChangeEventHandler OperationsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationsRow(OperationsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow AddOperationsRow(_treeOperationsRow parent_treeOperationsRowByFK_Operations_treeOperations, int Code, string Name, RegDocTypesRow parentRegDocTypesRowByFK_Operations_RegDocTypes, BaseAccountsRow parentBaseAccountsRowByFK_Operations_BaseAccount_Dt, BaseAccountsRow parentBaseAccountsRowByFK_Operations_BaseAccount_Cr, string Comment) {
                OperationsRow rowOperationsRow = ((OperationsRow)(this.NewRow()));
                rowOperationsRow.ItemArray = new object[] {
                        null,
                        parent_treeOperationsRowByFK_Operations_treeOperations[1],
                        Code,
                        Name,
                        parentRegDocTypesRowByFK_Operations_RegDocTypes[0],
                        parentBaseAccountsRowByFK_Operations_BaseAccount_Dt[0],
                        parentBaseAccountsRowByFK_Operations_BaseAccount_Cr[0],
                        Comment};
                this.Rows.Add(rowOperationsRow);
                return rowOperationsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OperationsDataTable cln = ((OperationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OperationsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnParent_FP = base.Columns["Parent_FP"];
                this.columnCode = base.Columns["Code"];
                this.columnName = base.Columns["Name"];
                this.columnRegDocType_id = base.Columns["RegDocType_id"];
                this.columnDt_Account_id = base.Columns["Dt_Account_id"];
                this.columnCr_Account_id = base.Columns["Cr_Account_id"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnParent_FP = new System.Data.DataColumn("Parent_FP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParent_FP);
                this.columnCode = new System.Data.DataColumn("Code", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRegDocType_id = new System.Data.DataColumn("RegDocType_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDocType_id);
                this.columnDt_Account_id = new System.Data.DataColumn("Dt_Account_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDt_Account_id);
                this.columnCr_Account_id = new System.Data.DataColumn("Cr_Account_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCr_Account_id);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnParent_FP.AllowDBNull = false;
                this.columnCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDt_Account_id.AllowDBNull = false;
                this.columnCr_Account_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow NewOperationsRow() {
                return ((OperationsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OperationsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OperationsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationsRowChanged != null)) {
                    this.OperationsRowChanged(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationsRowChanging != null)) {
                    this.OperationsRowChanging(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationsRowDeleted != null)) {
                    this.OperationsRowDeleted(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationsRowDeleting != null)) {
                    this.OperationsRowDeleting(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationsRow(OperationsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegDocsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnRegDocType_id;
            
            private System.Data.DataColumn columnregDate;
            
            private System.Data.DataColumn columndocDate;
            
            private System.Data.DataColumn columndocNum;
            
            private System.Data.DataColumn columnsysUser;
            
            private System.Data.DataColumn columnsysDate;
            
            private System.Data.DataColumn columnComment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsDataTable() {
                this.TableName = "RegDocs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegDocsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegDocsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDocType_idColumn {
                get {
                    return this.columnRegDocType_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn regDateColumn {
                get {
                    return this.columnregDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn docDateColumn {
                get {
                    return this.columndocDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn docNumColumn {
                get {
                    return this.columndocNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow this[int index] {
                get {
                    return ((RegDocsRow)(this.Rows[index]));
                }
            }
            
            public event RegDocsRowChangeEventHandler RegDocsRowChanging;
            
            public event RegDocsRowChangeEventHandler RegDocsRowChanged;
            
            public event RegDocsRowChangeEventHandler RegDocsRowDeleting;
            
            public event RegDocsRowChangeEventHandler RegDocsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegDocsRow(RegDocsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow AddRegDocsRow(RegDocTypesRow parentRegDocTypesRowByFK_RegDocs_RegDocTypes, System.DateTime regDate, System.DateTime docDate, string docNum, string sysUser, System.DateTime sysDate, string Comment) {
                RegDocsRow rowRegDocsRow = ((RegDocsRow)(this.NewRow()));
                rowRegDocsRow.ItemArray = new object[] {
                        null,
                        parentRegDocTypesRowByFK_RegDocs_RegDocTypes[0],
                        regDate,
                        docDate,
                        docNum,
                        sysUser,
                        sysDate,
                        Comment};
                this.Rows.Add(rowRegDocsRow);
                return rowRegDocsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RegDocsDataTable cln = ((RegDocsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RegDocsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnRegDocType_id = base.Columns["RegDocType_id"];
                this.columnregDate = base.Columns["regDate"];
                this.columndocDate = base.Columns["docDate"];
                this.columndocNum = base.Columns["docNum"];
                this.columnsysUser = base.Columns["sysUser"];
                this.columnsysDate = base.Columns["sysDate"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnRegDocType_id = new System.Data.DataColumn("RegDocType_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDocType_id);
                this.columnregDate = new System.Data.DataColumn("regDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnregDate);
                this.columndocDate = new System.Data.DataColumn("docDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndocDate);
                this.columndocNum = new System.Data.DataColumn("docNum", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndocNum);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnRegDocType_id.AllowDBNull = false;
                this.columnregDate.AllowDBNull = false;
                this.columndocDate.AllowDBNull = false;
                this.columndocNum.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow NewRegDocsRow() {
                return ((RegDocsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RegDocsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RegDocsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegDocsRowChanged != null)) {
                    this.RegDocsRowChanged(this, new RegDocsRowChangeEvent(((RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegDocsRowChanging != null)) {
                    this.RegDocsRowChanging(this, new RegDocsRowChangeEvent(((RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegDocsRowDeleted != null)) {
                    this.RegDocsRowDeleted(this, new RegDocsRowChangeEvent(((RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegDocsRowDeleting != null)) {
                    this.RegDocsRowDeleting(this, new RegDocsRowChangeEvent(((RegDocsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegDocsRow(RegDocsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegDocsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegDocTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnSCode;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnisFixed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesDataTable() {
                this.TableName = "RegDocTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegDocTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegDocTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCodeColumn {
                get {
                    return this.columnSCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn isFixedColumn {
                get {
                    return this.columnisFixed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow this[int index] {
                get {
                    return ((RegDocTypesRow)(this.Rows[index]));
                }
            }
            
            public event RegDocTypesRowChangeEventHandler RegDocTypesRowChanging;
            
            public event RegDocTypesRowChangeEventHandler RegDocTypesRowChanged;
            
            public event RegDocTypesRowChangeEventHandler RegDocTypesRowDeleting;
            
            public event RegDocTypesRowChangeEventHandler RegDocTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegDocTypesRow(RegDocTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow AddRegDocTypesRow(string SCode, string Name, bool isFixed) {
                RegDocTypesRow rowRegDocTypesRow = ((RegDocTypesRow)(this.NewRow()));
                rowRegDocTypesRow.ItemArray = new object[] {
                        null,
                        SCode,
                        Name,
                        isFixed};
                this.Rows.Add(rowRegDocTypesRow);
                return rowRegDocTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RegDocTypesDataTable cln = ((RegDocTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RegDocTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnSCode = base.Columns["SCode"];
                this.columnName = base.Columns["Name"];
                this.columnisFixed = base.Columns["isFixed"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnSCode = new System.Data.DataColumn("SCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnisFixed = new System.Data.DataColumn("isFixed", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnisFixed);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnSCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow NewRegDocTypesRow() {
                return ((RegDocTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RegDocTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RegDocTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegDocTypesRowChanged != null)) {
                    this.RegDocTypesRowChanged(this, new RegDocTypesRowChangeEvent(((RegDocTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegDocTypesRowChanging != null)) {
                    this.RegDocTypesRowChanging(this, new RegDocTypesRowChangeEvent(((RegDocTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegDocTypesRowDeleted != null)) {
                    this.RegDocTypesRowDeleted(this, new RegDocTypesRowChangeEvent(((RegDocTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegDocTypesRowDeleting != null)) {
                    this.RegDocTypesRowDeleting(this, new RegDocTypesRowChangeEvent(((RegDocTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegDocTypesRow(RegDocTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegDocTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnBaseAccount_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsDataTable() {
                this.TableName = "Regs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaseAccount_idColumn {
                get {
                    return this.columnBaseAccount_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow this[int index] {
                get {
                    return ((RegsRow)(this.Rows[index]));
                }
            }
            
            public event RegsRowChangeEventHandler RegsRowChanging;
            
            public event RegsRowChangeEventHandler RegsRowChanged;
            
            public event RegsRowChangeEventHandler RegsRowDeleting;
            
            public event RegsRowChangeEventHandler RegsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegsRow(RegsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow AddRegsRow(BaseAccountsRow parentBaseAccountsRowByFK_Regs_BaseAccounts) {
                RegsRow rowRegsRow = ((RegsRow)(this.NewRow()));
                rowRegsRow.ItemArray = new object[] {
                        null,
                        parentBaseAccountsRowByFK_Regs_BaseAccounts[0]};
                this.Rows.Add(rowRegsRow);
                return rowRegsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RegsDataTable cln = ((RegsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RegsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnBaseAccount_id = base.Columns["BaseAccount_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnBaseAccount_id = new System.Data.DataColumn("BaseAccount_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseAccount_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnBaseAccount_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow NewRegsRow() {
                return ((RegsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RegsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RegsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegsRowChanged != null)) {
                    this.RegsRowChanged(this, new RegsRowChangeEvent(((RegsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegsRowChanging != null)) {
                    this.RegsRowChanging(this, new RegsRowChangeEvent(((RegsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegsRowDeleted != null)) {
                    this.RegsRowDeleted(this, new RegsRowChangeEvent(((RegsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegsRowDeleting != null)) {
                    this.RegsRowDeleting(this, new RegsRowChangeEvent(((RegsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegsRow(RegsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Regs_DetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnHeader_id;
            
            private System.Data.DataColumn columnCard_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsDataTable() {
                this.TableName = "Regs_Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Regs_DetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Regs_DetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Header_idColumn {
                get {
                    return this.columnHeader_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Card_idColumn {
                get {
                    return this.columnCard_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow this[int index] {
                get {
                    return ((Regs_DetailsRow)(this.Rows[index]));
                }
            }
            
            public event Regs_DetailsRowChangeEventHandler Regs_DetailsRowChanging;
            
            public event Regs_DetailsRowChangeEventHandler Regs_DetailsRowChanged;
            
            public event Regs_DetailsRowChangeEventHandler Regs_DetailsRowDeleting;
            
            public event Regs_DetailsRowChangeEventHandler Regs_DetailsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegs_DetailsRow(Regs_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow AddRegs_DetailsRow(RegsRow parentRegsRowByFK_Regs_Details_Regs, CardsRow parentCardsRowByFK_Regs_Details_Cards) {
                Regs_DetailsRow rowRegs_DetailsRow = ((Regs_DetailsRow)(this.NewRow()));
                rowRegs_DetailsRow.ItemArray = new object[] {
                        null,
                        parentRegsRowByFK_Regs_Details_Regs[0],
                        parentCardsRowByFK_Regs_Details_Cards[0]};
                this.Rows.Add(rowRegs_DetailsRow);
                return rowRegs_DetailsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Regs_DetailsDataTable cln = ((Regs_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Regs_DetailsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnHeader_id = base.Columns["Header_id"];
                this.columnCard_id = base.Columns["Card_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnHeader_id = new System.Data.DataColumn("Header_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeader_id);
                this.columnCard_id = new System.Data.DataColumn("Card_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCard_id);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnHeader_id.AllowDBNull = false;
                this.columnCard_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow NewRegs_DetailsRow() {
                return ((Regs_DetailsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Regs_DetailsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Regs_DetailsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Regs_DetailsRowChanged != null)) {
                    this.Regs_DetailsRowChanged(this, new Regs_DetailsRowChangeEvent(((Regs_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Regs_DetailsRowChanging != null)) {
                    this.Regs_DetailsRowChanging(this, new Regs_DetailsRowChangeEvent(((Regs_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Regs_DetailsRowDeleted != null)) {
                    this.Regs_DetailsRowDeleted(this, new Regs_DetailsRowChangeEvent(((Regs_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Regs_DetailsRowDeleting != null)) {
                    this.Regs_DetailsRowDeleting(this, new Regs_DetailsRowChangeEvent(((Regs_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegs_DetailsRow(Regs_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Regs_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransactionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnType_id;
            
            private System.Data.DataColumn columnChart_id;
            
            private System.Data.DataColumn columnOperation_id;
            
            private System.Data.DataColumn columnRegDoc_id;
            
            private System.Data.DataColumn columnRec_Date;
            
            private System.Data.DataColumn columnRec_Date2;
            
            private System.Data.DataColumn columnClient_id;
            
            private System.Data.DataColumn columnsumm;
            
            private System.Data.DataColumn columnsum2;
            
            private System.Data.DataColumn columndt_id;
            
            private System.Data.DataColumn columncr_id;
            
            private System.Data.DataColumn columndt_amount;
            
            private System.Data.DataColumn columncr_amount;
            
            private System.Data.DataColumn columndt_amount2;
            
            private System.Data.DataColumn columncr_amount2;
            
            private System.Data.DataColumn columnComment;
            
            private System.Data.DataColumn columnsysUser;
            
            private System.Data.DataColumn columnsysDate;
            
            private System.Data.DataColumn columndtCurrency;
            
            private System.Data.DataColumn columncrCurrency;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsDataTable() {
                this.TableName = "Transactions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransactionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Type_idColumn {
                get {
                    return this.columnType_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Chart_idColumn {
                get {
                    return this.columnChart_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Operation_idColumn {
                get {
                    return this.columnOperation_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDoc_idColumn {
                get {
                    return this.columnRegDoc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Rec_DateColumn {
                get {
                    return this.columnRec_Date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Rec_Date2Column {
                get {
                    return this.columnRec_Date2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Client_idColumn {
                get {
                    return this.columnClient_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn summColumn {
                get {
                    return this.columnsumm;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sum2Column {
                get {
                    return this.columnsum2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dt_idColumn {
                get {
                    return this.columndt_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cr_idColumn {
                get {
                    return this.columncr_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dt_amountColumn {
                get {
                    return this.columndt_amount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cr_amountColumn {
                get {
                    return this.columncr_amount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dt_amount2Column {
                get {
                    return this.columndt_amount2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn cr_amount2Column {
                get {
                    return this.columncr_amount2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dtCurrencyColumn {
                get {
                    return this.columndtCurrency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn crCurrencyColumn {
                get {
                    return this.columncrCurrency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow this[int index] {
                get {
                    return ((TransactionsRow)(this.Rows[index]));
                }
            }
            
            public event TransactionsRowChangeEventHandler TransactionsRowChanging;
            
            public event TransactionsRowChangeEventHandler TransactionsRowChanged;
            
            public event TransactionsRowChangeEventHandler TransactionsRowDeleting;
            
            public event TransactionsRowChangeEventHandler TransactionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransactionsRow(TransactionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow AddTransactionsRow(
                        TransTypesRow parentTransTypesRowByFK_Transactions_TransTypes, 
                        BaseChartsRow parentBaseChartsRowByFK_Transactions_BaseCharts, 
                        OperationsRow parentOperationsRowByFK_Transactions_Operations, 
                        RegDocsRow parentRegDocsRowByFK_Transactions_RegDocs, 
                        System.DateTime Rec_Date, 
                        System.DateTime Rec_Date2, 
                        ClientsRow parentClientsRowByFK_Transactions_Clients, 
                        decimal summ, 
                        decimal sum2, 
                        RegsRow parentRegsRowByFK_Transactions_Regs_Dt, 
                        RegsRow parentRegsRowByFK_Transactions_Regs_Cr, 
                        decimal dt_amount, 
                        decimal cr_amount, 
                        decimal dt_amount2, 
                        decimal cr_amount2, 
                        string Comment, 
                        string sysUser, 
                        System.DateTime sysDate, 
                        decimal dtCurrency, 
                        decimal crCurrency) {
                TransactionsRow rowTransactionsRow = ((TransactionsRow)(this.NewRow()));
                rowTransactionsRow.ItemArray = new object[] {
                        null,
                        parentTransTypesRowByFK_Transactions_TransTypes[0],
                        parentBaseChartsRowByFK_Transactions_BaseCharts[0],
                        parentOperationsRowByFK_Transactions_Operations[0],
                        parentRegDocsRowByFK_Transactions_RegDocs[0],
                        Rec_Date,
                        Rec_Date2,
                        parentClientsRowByFK_Transactions_Clients[0],
                        summ,
                        sum2,
                        parentRegsRowByFK_Transactions_Regs_Dt[0],
                        parentRegsRowByFK_Transactions_Regs_Cr[0],
                        dt_amount,
                        cr_amount,
                        dt_amount2,
                        cr_amount2,
                        Comment,
                        sysUser,
                        sysDate,
                        dtCurrency,
                        crCurrency};
                this.Rows.Add(rowTransactionsRow);
                return rowTransactionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TransactionsDataTable cln = ((TransactionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TransactionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnType_id = base.Columns["Type_id"];
                this.columnChart_id = base.Columns["Chart_id"];
                this.columnOperation_id = base.Columns["Operation_id"];
                this.columnRegDoc_id = base.Columns["RegDoc_id"];
                this.columnRec_Date = base.Columns["Rec_Date"];
                this.columnRec_Date2 = base.Columns["Rec_Date2"];
                this.columnClient_id = base.Columns["Client_id"];
                this.columnsumm = base.Columns["summ"];
                this.columnsum2 = base.Columns["sum2"];
                this.columndt_id = base.Columns["dt_id"];
                this.columncr_id = base.Columns["cr_id"];
                this.columndt_amount = base.Columns["dt_amount"];
                this.columncr_amount = base.Columns["cr_amount"];
                this.columndt_amount2 = base.Columns["dt_amount2"];
                this.columncr_amount2 = base.Columns["cr_amount2"];
                this.columnComment = base.Columns["Comment"];
                this.columnsysUser = base.Columns["sysUser"];
                this.columnsysDate = base.Columns["sysDate"];
                this.columndtCurrency = base.Columns["dtCurrency"];
                this.columncrCurrency = base.Columns["crCurrency"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnType_id = new System.Data.DataColumn("Type_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnType_id);
                this.columnChart_id = new System.Data.DataColumn("Chart_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChart_id);
                this.columnOperation_id = new System.Data.DataColumn("Operation_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_id);
                this.columnRegDoc_id = new System.Data.DataColumn("RegDoc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDoc_id);
                this.columnRec_Date = new System.Data.DataColumn("Rec_Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRec_Date);
                this.columnRec_Date2 = new System.Data.DataColumn("Rec_Date2", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRec_Date2);
                this.columnClient_id = new System.Data.DataColumn("Client_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient_id);
                this.columnsumm = new System.Data.DataColumn("summ", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsumm);
                this.columnsum2 = new System.Data.DataColumn("sum2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum2);
                this.columndt_id = new System.Data.DataColumn("dt_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndt_id);
                this.columncr_id = new System.Data.DataColumn("cr_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncr_id);
                this.columndt_amount = new System.Data.DataColumn("dt_amount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndt_amount);
                this.columncr_amount = new System.Data.DataColumn("cr_amount", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncr_amount);
                this.columndt_amount2 = new System.Data.DataColumn("dt_amount2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndt_amount2);
                this.columncr_amount2 = new System.Data.DataColumn("cr_amount2", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncr_amount2);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.columndtCurrency = new System.Data.DataColumn("dtCurrency", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndtCurrency);
                this.columncrCurrency = new System.Data.DataColumn("crCurrency", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncrCurrency);
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnRec_Date.AllowDBNull = false;
                this.columnRec_Date2.AllowDBNull = false;
                this.columnClient_id.AllowDBNull = false;
                this.columnsumm.AllowDBNull = false;
                this.columnsum2.AllowDBNull = false;
                this.columndt_id.AllowDBNull = false;
                this.columncr_id.AllowDBNull = false;
                this.columndt_amount.AllowDBNull = false;
                this.columncr_amount.AllowDBNull = false;
                this.columndt_amount2.AllowDBNull = false;
                this.columncr_amount2.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
                this.columndtCurrency.AllowDBNull = false;
                this.columncrCurrency.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow NewTransactionsRow() {
                return ((TransactionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TransactionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TransactionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionsRowChanged != null)) {
                    this.TransactionsRowChanged(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionsRowChanging != null)) {
                    this.TransactionsRowChanging(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionsRowDeleted != null)) {
                    this.TransactionsRowDeleted(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionsRowDeleting != null)) {
                    this.TransactionsRowDeleting(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransactionsRow(TransactionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransactionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransTypesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnSCode;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnsysUser;
            
            private System.Data.DataColumn columnsysDate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesDataTable() {
                this.TableName = "TransTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransTypesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransTypesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCodeColumn {
                get {
                    return this.columnSCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysUserColumn {
                get {
                    return this.columnsysUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sysDateColumn {
                get {
                    return this.columnsysDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRow this[int index] {
                get {
                    return ((TransTypesRow)(this.Rows[index]));
                }
            }
            
            public event TransTypesRowChangeEventHandler TransTypesRowChanging;
            
            public event TransTypesRowChangeEventHandler TransTypesRowChanged;
            
            public event TransTypesRowChangeEventHandler TransTypesRowDeleting;
            
            public event TransTypesRowChangeEventHandler TransTypesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransTypesRow(TransTypesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRow AddTransTypesRow(string SCode, string Name, string sysUser, System.DateTime sysDate) {
                TransTypesRow rowTransTypesRow = ((TransTypesRow)(this.NewRow()));
                rowTransTypesRow.ItemArray = new object[] {
                        null,
                        SCode,
                        Name,
                        sysUser,
                        sysDate};
                this.Rows.Add(rowTransTypesRow);
                return rowTransTypesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TransTypesDataTable cln = ((TransTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TransTypesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnSCode = base.Columns["SCode"];
                this.columnName = base.Columns["Name"];
                this.columnsysUser = base.Columns["sysUser"];
                this.columnsysDate = base.Columns["sysDate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnSCode = new System.Data.DataColumn("SCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCode);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnsysUser = new System.Data.DataColumn("sysUser", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysUser);
                this.columnsysDate = new System.Data.DataColumn("sysDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsysDate);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, false));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = 1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnSCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnsysUser.AllowDBNull = false;
                this.columnsysDate.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRow NewTransTypesRow() {
                return ((TransTypesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TransTypesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TransTypesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransTypesRowChanged != null)) {
                    this.TransTypesRowChanged(this, new TransTypesRowChangeEvent(((TransTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransTypesRowChanging != null)) {
                    this.TransTypesRowChanging(this, new TransTypesRowChangeEvent(((TransTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransTypesRowDeleted != null)) {
                    this.TransTypesRowDeleted(this, new TransTypesRowChangeEvent(((TransTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransTypesRowDeleting != null)) {
                    this.TransTypesRowDeleting(this, new TransTypesRowChangeEvent(((TransTypesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransTypesRow(TransTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Global ds = new Global();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _treeBaseAccountsRow : System.Data.DataRow {
            
            private _treeBaseAccountsDataTable table_treeBaseAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeBaseAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_treeBaseAccounts = ((_treeBaseAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.table_treeBaseAccounts.idColumn]));
                }
                set {
                    this[this.table_treeBaseAccounts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.table_treeBaseAccounts.FPColumn]));
                }
                set {
                    this[this.table_treeBaseAccounts.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    try {
                        return ((string)(this[this.table_treeBaseAccounts.Parent_FPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parent_FP\' in table \'_treeBaseAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_treeBaseAccounts.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.table_treeBaseAccounts.NameColumn]));
                }
                set {
                    this[this.table_treeBaseAccounts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow _treeBaseAccountsRowParent {
                get {
                    return ((_treeBaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_treeBaseAccounts_treeBaseAccounts1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_treeBaseAccounts_treeBaseAccounts1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParent_FPNull() {
                return this.IsNull(this.table_treeBaseAccounts.Parent_FPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParent_FPNull() {
                this[this.table_treeBaseAccounts.Parent_FPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow[] GetBaseChartsRows() {
                return ((BaseChartsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BaseCharts_treeBaseAccounts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow[] GetBaseAccountsRows() {
                return ((BaseAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BaseAccounts_treeBaseAccounts1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow[] Get_treeBaseAccountsRows() {
                return ((_treeBaseAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_treeBaseAccounts_treeBaseAccounts1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _treeCardsRow : System.Data.DataRow {
            
            private _treeCardsDataTable table_treeCards;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeCardsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_treeCards = ((_treeCardsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.table_treeCards.idColumn]));
                }
                set {
                    this[this.table_treeCards.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.table_treeCards.FPColumn]));
                }
                set {
                    this[this.table_treeCards.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    try {
                        return ((string)(this[this.table_treeCards.Parent_FPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parent_FP\' in table \'_treeCards\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_treeCards.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.table_treeCards.NameColumn]));
                }
                set {
                    this[this.table_treeCards.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow _treeCardsRowParent {
                get {
                    return ((_treeCardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_treeCards_treeCards1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_treeCards_treeCards1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParent_FPNull() {
                return this.IsNull(this.table_treeCards.Parent_FPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParent_FPNull() {
                this[this.table_treeCards.Parent_FPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow[] GetOperation_DetailsRows() {
                return ((Operation_DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operation_Details_treeCards"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow[] GetCardTypesRows() {
                return ((CardTypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_CardTypes_treeCards"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow[] GetCardsRows() {
                return ((CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Cards_treeCards1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow[] GetBaseAccount_CardsRows() {
                return ((BaseAccount_CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BaseAccount_Cards_treeCards"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow[] Get_treeCardsRows() {
                return ((_treeCardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_treeCards_treeCards1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _treeClientsRow : System.Data.DataRow {
            
            private _treeClientsDataTable table_treeClients;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeClientsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_treeClients = ((_treeClientsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.table_treeClients.idColumn]));
                }
                set {
                    this[this.table_treeClients.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.table_treeClients.FPColumn]));
                }
                set {
                    this[this.table_treeClients.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    try {
                        return ((string)(this[this.table_treeClients.Parent_FPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parent_FP\' in table \'_treeClients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_treeClients.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.table_treeClients.NameColumn]));
                }
                set {
                    this[this.table_treeClients.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow _treeClientsRowParent {
                get {
                    return ((_treeClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_treeClients_treeClients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_treeClients_treeClients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParent_FPNull() {
                return this.IsNull(this.table_treeClients.Parent_FPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParent_FPNull() {
                this[this.table_treeClients.Parent_FPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow[] GetClientsRows() {
                return ((ClientsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Clients_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow[] Get_treeClientsRows() {
                return ((_treeClientsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_treeClients_treeClients"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _treeExtAccountsRow : System.Data.DataRow {
            
            private _treeExtAccountsDataTable table_treeExtAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeExtAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_treeExtAccounts = ((_treeExtAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.table_treeExtAccounts.idColumn]));
                }
                set {
                    this[this.table_treeExtAccounts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.table_treeExtAccounts.FPColumn]));
                }
                set {
                    this[this.table_treeExtAccounts.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    try {
                        return ((string)(this[this.table_treeExtAccounts.Parent_FPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parent_FP\' in table \'_treeExtAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_treeExtAccounts.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.table_treeExtAccounts.NameColumn]));
                }
                set {
                    this[this.table_treeExtAccounts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow _treeExtAccountsRowParent {
                get {
                    return ((_treeExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_treeExtAccounts_treeExtAccounts1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_treeExtAccounts_treeExtAccounts1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParent_FPNull() {
                return this.IsNull(this.table_treeExtAccounts.Parent_FPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParent_FPNull() {
                this[this.table_treeExtAccounts.Parent_FPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow[] GetExtChartsRows() {
                return ((ExtChartsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ExtCharts_treeExtAccounts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow[] GetExtAccountsRows() {
                return ((ExtAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ExtAccounts_treeExtAccounts1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow[] Get_treeExtAccountsRows() {
                return ((_treeExtAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_treeExtAccounts_treeExtAccounts1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _treeOperationsRow : System.Data.DataRow {
            
            private _treeOperationsDataTable table_treeOperations;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _treeOperationsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_treeOperations = ((_treeOperationsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.table_treeOperations.idColumn]));
                }
                set {
                    this[this.table_treeOperations.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.table_treeOperations.FPColumn]));
                }
                set {
                    this[this.table_treeOperations.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    try {
                        return ((string)(this[this.table_treeOperations.Parent_FPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Parent_FP\' in table \'_treeOperations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_treeOperations.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.table_treeOperations.NameColumn]));
                }
                set {
                    this[this.table_treeOperations.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow _treeOperationsRowParent {
                get {
                    return ((_treeOperationsRow)(this.GetParentRow(this.Table.ParentRelations["FK_treeOperations_parent"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_treeOperations_parent"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParent_FPNull() {
                return this.IsNull(this.table_treeOperations.Parent_FPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParent_FPNull() {
                this[this.table_treeOperations.Parent_FPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow[] GetOperationsRows() {
                return ((OperationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operations_treeOperations"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow[] Get_treeOperationsRows() {
                return ((_treeOperationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_treeOperations_parent"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseAccount_CardsRow : System.Data.DataRow {
            
            private BaseAccount_CardsDataTable tableBaseAccount_Cards;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseAccount_CardsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseAccount_Cards = ((BaseAccount_CardsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableBaseAccount_Cards.idColumn]));
                }
                set {
                    this[this.tableBaseAccount_Cards.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header_id {
                get {
                    return ((int)(this[this.tableBaseAccount_Cards.Header_idColumn]));
                }
                set {
                    this[this.tableBaseAccount_Cards.Header_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CardType_id {
                get {
                    return ((int)(this[this.tableBaseAccount_Cards.CardType_idColumn]));
                }
                set {
                    this[this.tableBaseAccount_Cards.CardType_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TreeCard_id {
                get {
                    try {
                        return ((int)(this[this.tableBaseAccount_Cards.TreeCard_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TreeCard_id\' in table \'BaseAccount_Cards\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseAccount_Cards.TreeCard_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow BaseAccountsRow {
                get {
                    return ((BaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_BaseAccount_Cards_BaseAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BaseAccount_Cards_BaseAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow CardTypesRow {
                get {
                    return ((CardTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_BaseAccount_Cards_CardTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BaseAccount_Cards_CardTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow _treeCardsRow {
                get {
                    return ((_treeCardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_BaseAccount_Cards_treeCards"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BaseAccount_Cards_treeCards"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreeCard_idNull() {
                return this.IsNull(this.tableBaseAccount_Cards.TreeCard_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreeCard_idNull() {
                this[this.tableBaseAccount_Cards.TreeCard_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseAccountsRow : System.Data.DataRow {
            
            private BaseAccountsDataTable tableBaseAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseAccounts = ((BaseAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableBaseAccounts.idColumn]));
                }
                set {
                    this[this.tableBaseAccounts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    return ((string)(this[this.tableBaseAccounts.Parent_FPColumn]));
                }
                set {
                    this[this.tableBaseAccounts.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Code {
                get {
                    return ((int)(this[this.tableBaseAccounts.CodeColumn]));
                }
                set {
                    this[this.tableBaseAccounts.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBaseAccounts.NameColumn]));
                }
                set {
                    this[this.tableBaseAccounts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow _treeBaseAccountsRow {
                get {
                    return ((_treeBaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_BaseAccounts_treeBaseAccounts1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BaseAccounts_treeBaseAccounts1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow[] GetRegsRows() {
                return ((RegsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Regs_BaseAccounts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow[] GetOperationsRowsByFK_Operations_BaseAccount_Cr() {
                return ((OperationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operations_BaseAccount_Cr"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow[] GetOperationsRowsByFK_Operations_BaseAccount_Dt() {
                return ((OperationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operations_BaseAccount_Dt"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow[] GetlinkAccountsRows() {
                return ((linkAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_linkAccounts_BaseAccounts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow[] GetBaseAccount_CardsRows() {
                return ((BaseAccount_CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BaseAccount_Cards_BaseAccounts"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseChartsRow : System.Data.DataRow {
            
            private BaseChartsDataTable tableBaseCharts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseChartsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseCharts = ((BaseChartsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableBaseCharts.idColumn]));
                }
                set {
                    this[this.tableBaseCharts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.tableBaseCharts.FPColumn]));
                }
                set {
                    this[this.tableBaseCharts.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBaseCharts.NameColumn]));
                }
                set {
                    this[this.tableBaseCharts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow _treeBaseAccountsRow {
                get {
                    return ((_treeBaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_BaseCharts_treeBaseAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BaseCharts_treeBaseAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRows() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_BaseCharts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow[] GetExtChartsRows() {
                return ((ExtChartsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ExtCharts_BaseCharts"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CardsRow : System.Data.DataRow {
            
            private CardsDataTable tableCards;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCards = ((CardsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableCards.idColumn]));
                }
                set {
                    this[this.tableCards.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    return ((string)(this[this.tableCards.Parent_FPColumn]));
                }
                set {
                    this[this.tableCards.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Code {
                get {
                    return ((int)(this[this.tableCards.CodeColumn]));
                }
                set {
                    this[this.tableCards.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCards.NameColumn]));
                }
                set {
                    this[this.tableCards.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCards.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'Cards\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCards.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow _treeCardsRow {
                get {
                    return ((_treeCardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Cards_treeCards1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Cards_treeCards1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCards.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCards.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow[] GetRegs_DetailsRows() {
                return ((Regs_DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Regs_Details_Cards"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow[] GetOperation_DetailsRows() {
                return ((Operation_DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operation_Details_Cards"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CardTypesRow : System.Data.DataRow {
            
            private CardTypesDataTable tableCardTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CardTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCardTypes = ((CardTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableCardTypes.idColumn]));
                }
                set {
                    this[this.tableCardTypes.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.tableCardTypes.FPColumn]));
                }
                set {
                    this[this.tableCardTypes.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCardTypes.NameColumn]));
                }
                set {
                    this[this.tableCardTypes.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool hasAmount {
                get {
                    return ((bool)(this[this.tableCardTypes.hasAmountColumn]));
                }
                set {
                    this[this.tableCardTypes.hasAmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow _treeCardsRow {
                get {
                    return ((_treeCardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_CardTypes_treeCards"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_CardTypes_treeCards"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow[] GetExtAccount_CardsRows() {
                return ((ExtAccount_CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ExtAccount_Cards_CardTypes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow[] GetBaseAccount_CardsRows() {
                return ((BaseAccount_CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BaseAccount_Cards_CardTypes"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Client_RegDocsRow : System.Data.DataRow {
            
            private Client_RegDocsDataTable tableClient_RegDocs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Client_RegDocsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClient_RegDocs = ((Client_RegDocsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableClient_RegDocs.idColumn]));
                }
                set {
                    this[this.tableClient_RegDocs.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header_id {
                get {
                    return ((int)(this[this.tableClient_RegDocs.Header_idColumn]));
                }
                set {
                    this[this.tableClient_RegDocs.Header_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Client_id {
                get {
                    return ((int)(this[this.tableClient_RegDocs.Client_idColumn]));
                }
                set {
                    this[this.tableClient_RegDocs.Client_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Client_RegDocs_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Client_RegDocs_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow RegDocsRow {
                get {
                    return ((RegDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Client_RegDocs_RegDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Client_RegDocs_RegDocs"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsRow : System.Data.DataRow {
            
            private ClientsDataTable tableClients;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClients = ((ClientsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableClients.idColumn]));
                }
                set {
                    this[this.tableClients.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    return ((string)(this[this.tableClients.Parent_FPColumn]));
                }
                set {
                    this[this.tableClients.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Code {
                get {
                    return ((int)(this[this.tableClients.CodeColumn]));
                }
                set {
                    this[this.tableClients.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCode {
                get {
                    return ((string)(this[this.tableClients.SCodeColumn]));
                }
                set {
                    this[this.tableClients.SCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableClients.NameColumn]));
                }
                set {
                    this[this.tableClients.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableClients.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'Clients\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow _treeClientsRow {
                get {
                    return ((_treeClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Clients_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Clients_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableClients.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableClients.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRows() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow[] GetMyTestDocumentRows() {
                return ((MyTestDocumentRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MyTestDocument_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRow[] GetClientsULRows() {
                return ((ClientsULRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ClientsJUR_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRow[] GetClientsPFRows() {
                return ((ClientsPFRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ClientsNPF_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRow[] GetClientsFLRows() {
                return ((ClientsFLRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ClientsFIZ_Clients"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow[] GetClient_RegDocsRows() {
                return ((Client_RegDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Client_RegDocs_Clients"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsFLRow : System.Data.DataRow {
            
            private ClientsFLDataTable tableClientsFL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsFLRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsFL = ((ClientsFLDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableClientsFL.idColumn]));
                }
                set {
                    this[this.tableClientsFL.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BirthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientsFL.BirthDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BirthDate\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.BirthDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BirthPlace {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.BirthPlaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BirthPlace\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.BirthPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Doc_Name {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.Doc_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Doc_Name\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.Doc_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Doc_Seria {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.Doc_SeriaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Doc_Seria\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.Doc_SeriaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Doc_Number {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.Doc_NumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Doc_Number\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.Doc_NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Doc_WhenIssued {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientsFL.Doc_WhenIssuedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Doc_WhenIssued\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.Doc_WhenIssuedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Doc_Issuer {
                get {
                    try {
                        return ((string)(this[this.tableClientsFL.Doc_IssuerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Doc_Issuer\' in table \'ClientsFL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsFL.Doc_IssuerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableClientsFL.sysDateColumn]));
                }
                set {
                    this[this.tableClientsFL.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableClientsFL.sysUserColumn]));
                }
                set {
                    this[this.tableClientsFL.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ClientsFIZ_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ClientsFIZ_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableClientsFL.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableClientsFL.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthDateNull() {
                return this.IsNull(this.tableClientsFL.BirthDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthDateNull() {
                this[this.tableClientsFL.BirthDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBirthPlaceNull() {
                return this.IsNull(this.tableClientsFL.BirthPlaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBirthPlaceNull() {
                this[this.tableClientsFL.BirthPlaceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoc_NameNull() {
                return this.IsNull(this.tableClientsFL.Doc_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoc_NameNull() {
                this[this.tableClientsFL.Doc_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoc_SeriaNull() {
                return this.IsNull(this.tableClientsFL.Doc_SeriaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoc_SeriaNull() {
                this[this.tableClientsFL.Doc_SeriaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoc_NumberNull() {
                return this.IsNull(this.tableClientsFL.Doc_NumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoc_NumberNull() {
                this[this.tableClientsFL.Doc_NumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoc_WhenIssuedNull() {
                return this.IsNull(this.tableClientsFL.Doc_WhenIssuedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoc_WhenIssuedNull() {
                this[this.tableClientsFL.Doc_WhenIssuedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDoc_IssuerNull() {
                return this.IsNull(this.tableClientsFL.Doc_IssuerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDoc_IssuerNull() {
                this[this.tableClientsFL.Doc_IssuerColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsPFRow : System.Data.DataRow {
            
            private ClientsPFDataTable tableClientsPF;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsPFRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsPF = ((ClientsPFDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableClientsPF.idColumn]));
                }
                set {
                    this[this.tableClientsPF.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableClientsPF.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ClientsPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsPF.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientsPF.RegDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegDate\' in table \'ClientsPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsPF.RegDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegPlace {
                get {
                    try {
                        return ((string)(this[this.tableClientsPF.RegPlaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegPlace\' in table \'ClientsPF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsPF.RegPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableClientsPF.sysDateColumn]));
                }
                set {
                    this[this.tableClientsPF.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableClientsPF.sysUserColumn]));
                }
                set {
                    this[this.tableClientsPF.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ClientsNPF_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ClientsNPF_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableClientsPF.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableClientsPF.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegDateNull() {
                return this.IsNull(this.tableClientsPF.RegDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegDateNull() {
                this[this.tableClientsPF.RegDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegPlaceNull() {
                return this.IsNull(this.tableClientsPF.RegPlaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegPlaceNull() {
                this[this.tableClientsPF.RegPlaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsULRow : System.Data.DataRow {
            
            private ClientsULDataTable tableClientsUL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsULRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsUL = ((ClientsULDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableClientsUL.idColumn]));
                }
                set {
                    this[this.tableClientsUL.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableClientsUL.FullNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullName\' in table \'ClientsUL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsUL.FullNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableClientsUL.RegDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegDate\' in table \'ClientsUL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsUL.RegDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegPlace {
                get {
                    try {
                        return ((string)(this[this.tableClientsUL.RegPlaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegPlace\' in table \'ClientsUL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsUL.RegPlaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INN {
                get {
                    try {
                        return ((string)(this[this.tableClientsUL.INNColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'INN\' in table \'ClientsUL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsUL.INNColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableClientsUL.sysDateColumn]));
                }
                set {
                    this[this.tableClientsUL.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableClientsUL.sysUserColumn]));
                }
                set {
                    this[this.tableClientsUL.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ClientsJUR_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ClientsJUR_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullNameNull() {
                return this.IsNull(this.tableClientsUL.FullNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullNameNull() {
                this[this.tableClientsUL.FullNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegDateNull() {
                return this.IsNull(this.tableClientsUL.RegDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegDateNull() {
                this[this.tableClientsUL.RegDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegPlaceNull() {
                return this.IsNull(this.tableClientsUL.RegPlaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegPlaceNull() {
                this[this.tableClientsUL.RegPlaceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINNNull() {
                return this.IsNull(this.tableClientsUL.INNColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINNNull() {
                this[this.tableClientsUL.INNColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtAccount_CardsRow : System.Data.DataRow {
            
            private ExtAccount_CardsDataTable tableExtAccount_Cards;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtAccount_CardsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtAccount_Cards = ((ExtAccount_CardsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableExtAccount_Cards.idColumn]));
                }
                set {
                    this[this.tableExtAccount_Cards.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header_id {
                get {
                    return ((int)(this[this.tableExtAccount_Cards.Header_idColumn]));
                }
                set {
                    this[this.tableExtAccount_Cards.Header_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CardType_id {
                get {
                    return ((int)(this[this.tableExtAccount_Cards.CardType_idColumn]));
                }
                set {
                    this[this.tableExtAccount_Cards.CardType_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow CardTypesRow {
                get {
                    return ((CardTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_ExtAccount_Cards_CardTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ExtAccount_Cards_CardTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow ExtAccountsRow {
                get {
                    return ((ExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ExtAccount_Cards_ExtAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ExtAccount_Cards_ExtAccounts"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtAccountsRow : System.Data.DataRow {
            
            private ExtAccountsDataTable tableExtAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtAccounts = ((ExtAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableExtAccounts.idColumn]));
                }
                set {
                    this[this.tableExtAccounts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    return ((string)(this[this.tableExtAccounts.Parent_FPColumn]));
                }
                set {
                    this[this.tableExtAccounts.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Code {
                get {
                    return ((int)(this[this.tableExtAccounts.CodeColumn]));
                }
                set {
                    this[this.tableExtAccounts.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableExtAccounts.NameColumn]));
                }
                set {
                    this[this.tableExtAccounts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow _treeExtAccountsRow {
                get {
                    return ((_treeExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ExtAccounts_treeExtAccounts1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ExtAccounts_treeExtAccounts1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow[] GetlinkAccountsRowsByFK_linkAccounts_ExtAccounts() {
                return ((linkAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_linkAccounts_ExtAccounts"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow[] GetlinkAccountsRowsByFK_linkAccounts_ExtAccounts1() {
                return ((linkAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_linkAccounts_ExtAccounts1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow[] GetExtAccount_CardsRows() {
                return ((ExtAccount_CardsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ExtAccount_Cards_ExtAccounts"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtChartsRow : System.Data.DataRow {
            
            private ExtChartsDataTable tableExtCharts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtChartsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtCharts = ((ExtChartsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableExtCharts.idColumn]));
                }
                set {
                    this[this.tableExtCharts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FP {
                get {
                    return ((string)(this[this.tableExtCharts.FPColumn]));
                }
                set {
                    this[this.tableExtCharts.FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableExtCharts.NameColumn]));
                }
                set {
                    this[this.tableExtCharts.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseChart_id {
                get {
                    try {
                        return ((int)(this[this.tableExtCharts.BaseChart_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BaseChart_id\' in table \'ExtCharts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtCharts.BaseChart_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow BaseChartsRow {
                get {
                    return ((BaseChartsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ExtCharts_BaseCharts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ExtCharts_BaseCharts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow _treeExtAccountsRow {
                get {
                    return ((_treeExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_ExtCharts_treeExtAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ExtCharts_treeExtAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseChart_idNull() {
                return this.IsNull(this.tableExtCharts.BaseChart_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseChart_idNull() {
                this[this.tableExtCharts.BaseChart_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow[] GetlinkAccountsRows() {
                return ((linkAccountsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_linkAccounts_ExtCharts"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class linkAccountsRow : System.Data.DataRow {
            
            private linkAccountsDataTable tablelinkAccounts;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal linkAccountsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelinkAccounts = ((linkAccountsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tablelinkAccounts.idColumn]));
                }
                set {
                    this[this.tablelinkAccounts.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseAccount_id {
                get {
                    try {
                        return ((int)(this[this.tablelinkAccounts.BaseAccount_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BaseAccount_id\' in table \'linkAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelinkAccounts.BaseAccount_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExtChart_id {
                get {
                    try {
                        return ((int)(this[this.tablelinkAccounts.ExtChart_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtChart_id\' in table \'linkAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelinkAccounts.ExtChart_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExtAccount1_id {
                get {
                    try {
                        return ((int)(this[this.tablelinkAccounts.ExtAccount1_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtAccount1_id\' in table \'linkAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelinkAccounts.ExtAccount1_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExtAccount2_id {
                get {
                    try {
                        return ((int)(this[this.tablelinkAccounts.ExtAccount2_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtAccount2_id\' in table \'linkAccounts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelinkAccounts.ExtAccount2_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow BaseAccountsRow {
                get {
                    return ((BaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_linkAccounts_BaseAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_linkAccounts_BaseAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow ExtAccountsRowByFK_linkAccounts_ExtAccounts {
                get {
                    return ((ExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_linkAccounts_ExtAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_linkAccounts_ExtAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow ExtAccountsRowByFK_linkAccounts_ExtAccounts1 {
                get {
                    return ((ExtAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_linkAccounts_ExtAccounts1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_linkAccounts_ExtAccounts1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow ExtChartsRow {
                get {
                    return ((ExtChartsRow)(this.GetParentRow(this.Table.ParentRelations["FK_linkAccounts_ExtCharts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_linkAccounts_ExtCharts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseAccount_idNull() {
                return this.IsNull(this.tablelinkAccounts.BaseAccount_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseAccount_idNull() {
                this[this.tablelinkAccounts.BaseAccount_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtChart_idNull() {
                return this.IsNull(this.tablelinkAccounts.ExtChart_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtChart_idNull() {
                this[this.tablelinkAccounts.ExtChart_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtAccount1_idNull() {
                return this.IsNull(this.tablelinkAccounts.ExtAccount1_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtAccount1_idNull() {
                this[this.tablelinkAccounts.ExtAccount1_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtAccount2_idNull() {
                return this.IsNull(this.tablelinkAccounts.ExtAccount2_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtAccount2_idNull() {
                this[this.tablelinkAccounts.ExtAccount2_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MyTestDocumentRow : System.Data.DataRow {
            
            private MyTestDocumentDataTable tableMyTestDocument;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MyTestDocumentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMyTestDocument = ((MyTestDocumentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableMyTestDocument.idColumn]));
                }
                set {
                    this[this.tableMyTestDocument.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegDoc_id {
                get {
                    return ((int)(this[this.tableMyTestDocument.RegDoc_idColumn]));
                }
                set {
                    this[this.tableMyTestDocument.RegDoc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocNum {
                get {
                    return ((string)(this[this.tableMyTestDocument.DocNumColumn]));
                }
                set {
                    this[this.tableMyTestDocument.DocNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocDate {
                get {
                    return ((System.DateTime)(this[this.tableMyTestDocument.DocDateColumn]));
                }
                set {
                    this[this.tableMyTestDocument.DocDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Client_id {
                get {
                    try {
                        return ((int)(this[this.tableMyTestDocument.Client_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Client_id\' in table \'MyTestDocument\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMyTestDocument.Client_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableMyTestDocument.sysUserColumn]));
                }
                set {
                    this[this.tableMyTestDocument.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableMyTestDocument.sysDateColumn]));
                }
                set {
                    this[this.tableMyTestDocument.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_MyTestDocument_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MyTestDocument_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow RegDocsRow {
                get {
                    return ((RegDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_MyTestDocument_RegDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MyTestDocument_RegDocs"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClient_idNull() {
                return this.IsNull(this.tableMyTestDocument.Client_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClient_idNull() {
                this[this.tableMyTestDocument.Client_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Operation_DetailsRow : System.Data.DataRow {
            
            private Operation_DetailsDataTable tableOperation_Details;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Operation_DetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperation_Details = ((Operation_DetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableOperation_Details.idColumn]));
                }
                set {
                    this[this.tableOperation_Details.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header_id {
                get {
                    return ((int)(this[this.tableOperation_Details.Header_idColumn]));
                }
                set {
                    this[this.tableOperation_Details.Header_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isDt {
                get {
                    return ((bool)(this[this.tableOperation_Details.isDtColumn]));
                }
                set {
                    this[this.tableOperation_Details.isDtColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TreeCard_id {
                get {
                    try {
                        return ((int)(this[this.tableOperation_Details.TreeCard_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TreeCard_id\' in table \'Operation_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperation_Details.TreeCard_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_id {
                get {
                    try {
                        return ((int)(this[this.tableOperation_Details.Card_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Card_id\' in table \'Operation_Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperation_Details.Card_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow CardsRow {
                get {
                    return ((CardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operation_Details_Cards"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operation_Details_Cards"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow OperationsRow {
                get {
                    return ((OperationsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operation_Details_Operations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operation_Details_Operations"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow _treeCardsRow {
                get {
                    return ((_treeCardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operation_Details_treeCards"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operation_Details_treeCards"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTreeCard_idNull() {
                return this.IsNull(this.tableOperation_Details.TreeCard_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTreeCard_idNull() {
                this[this.tableOperation_Details.TreeCard_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCard_idNull() {
                return this.IsNull(this.tableOperation_Details.Card_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCard_idNull() {
                this[this.tableOperation_Details.Card_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationsRow : System.Data.DataRow {
            
            private OperationsDataTable tableOperations;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperations = ((OperationsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableOperations.idColumn]));
                }
                set {
                    this[this.tableOperations.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Parent_FP {
                get {
                    return ((string)(this[this.tableOperations.Parent_FPColumn]));
                }
                set {
                    this[this.tableOperations.Parent_FPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Code {
                get {
                    return ((int)(this[this.tableOperations.CodeColumn]));
                }
                set {
                    this[this.tableOperations.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableOperations.NameColumn]));
                }
                set {
                    this[this.tableOperations.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegDocType_id {
                get {
                    try {
                        return ((int)(this[this.tableOperations.RegDocType_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegDocType_id\' in table \'Operations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperations.RegDocType_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Dt_Account_id {
                get {
                    return ((int)(this[this.tableOperations.Dt_Account_idColumn]));
                }
                set {
                    this[this.tableOperations.Dt_Account_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Cr_Account_id {
                get {
                    return ((int)(this[this.tableOperations.Cr_Account_idColumn]));
                }
                set {
                    this[this.tableOperations.Cr_Account_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOperations.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'Operations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperations.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow BaseAccountsRowByFK_Operations_BaseAccount_Cr {
                get {
                    return ((BaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operations_BaseAccount_Cr"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operations_BaseAccount_Cr"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow BaseAccountsRowByFK_Operations_BaseAccount_Dt {
                get {
                    return ((BaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operations_BaseAccount_Dt"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operations_BaseAccount_Dt"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow RegDocTypesRow {
                get {
                    return ((RegDocTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operations_RegDocTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operations_RegDocTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow _treeOperationsRow {
                get {
                    return ((_treeOperationsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Operations_treeOperations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Operations_treeOperations"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegDocType_idNull() {
                return this.IsNull(this.tableOperations.RegDocType_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegDocType_idNull() {
                this[this.tableOperations.RegDocType_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOperations.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOperations.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRows() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_Operations"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow[] GetOperation_DetailsRows() {
                return ((Operation_DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operation_Details_Operations"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegDocsRow : System.Data.DataRow {
            
            private RegDocsDataTable tableRegDocs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegDocsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegDocs = ((RegDocsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableRegDocs.idColumn]));
                }
                set {
                    this[this.tableRegDocs.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegDocType_id {
                get {
                    return ((int)(this[this.tableRegDocs.RegDocType_idColumn]));
                }
                set {
                    this[this.tableRegDocs.RegDocType_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime regDate {
                get {
                    return ((System.DateTime)(this[this.tableRegDocs.regDateColumn]));
                }
                set {
                    this[this.tableRegDocs.regDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime docDate {
                get {
                    return ((System.DateTime)(this[this.tableRegDocs.docDateColumn]));
                }
                set {
                    this[this.tableRegDocs.docDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docNum {
                get {
                    return ((string)(this[this.tableRegDocs.docNumColumn]));
                }
                set {
                    this[this.tableRegDocs.docNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableRegDocs.sysUserColumn]));
                }
                set {
                    this[this.tableRegDocs.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableRegDocs.sysDateColumn]));
                }
                set {
                    this[this.tableRegDocs.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableRegDocs.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'RegDocs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegDocs.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow RegDocTypesRow {
                get {
                    return ((RegDocTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_RegDocs_RegDocTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_RegDocs_RegDocTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableRegDocs.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableRegDocs.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRows() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_RegDocs"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow[] GetMyTestDocumentRows() {
                return ((MyTestDocumentRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MyTestDocument_RegDocs"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow[] GetClient_RegDocsRows() {
                return ((Client_RegDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Client_RegDocs_RegDocs"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegDocTypesRow : System.Data.DataRow {
            
            private RegDocTypesDataTable tableRegDocTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegDocTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegDocTypes = ((RegDocTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableRegDocTypes.idColumn]));
                }
                set {
                    this[this.tableRegDocTypes.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCode {
                get {
                    return ((string)(this[this.tableRegDocTypes.SCodeColumn]));
                }
                set {
                    this[this.tableRegDocTypes.SCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRegDocTypes.NameColumn]));
                }
                set {
                    this[this.tableRegDocTypes.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isFixed {
                get {
                    try {
                        return ((bool)(this[this.tableRegDocTypes.isFixedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'isFixed\' in table \'RegDocTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegDocTypes.isFixedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisFixedNull() {
                return this.IsNull(this.tableRegDocTypes.isFixedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisFixedNull() {
                this[this.tableRegDocTypes.isFixedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow[] GetRegDocsRows() {
                return ((RegDocsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_RegDocs_RegDocTypes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow[] GetOperationsRows() {
                return ((OperationsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Operations_RegDocTypes"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegsRow : System.Data.DataRow {
            
            private RegsDataTable tableRegs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegs = ((RegsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableRegs.idColumn]));
                }
                set {
                    this[this.tableRegs.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseAccount_id {
                get {
                    return ((int)(this[this.tableRegs.BaseAccount_idColumn]));
                }
                set {
                    this[this.tableRegs.BaseAccount_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow BaseAccountsRow {
                get {
                    return ((BaseAccountsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Regs_BaseAccounts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Regs_BaseAccounts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRowsByFK_Transactions_Regs_Cr() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_Regs_Cr"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRowsByFK_Transactions_Regs_Dt() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_Regs_Dt"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow[] GetRegs_DetailsRows() {
                return ((Regs_DetailsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Regs_Details_Regs"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Regs_DetailsRow : System.Data.DataRow {
            
            private Regs_DetailsDataTable tableRegs_Details;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Regs_DetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegs_Details = ((Regs_DetailsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableRegs_Details.idColumn]));
                }
                set {
                    this[this.tableRegs_Details.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Header_id {
                get {
                    return ((int)(this[this.tableRegs_Details.Header_idColumn]));
                }
                set {
                    this[this.tableRegs_Details.Header_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Card_id {
                get {
                    return ((int)(this[this.tableRegs_Details.Card_idColumn]));
                }
                set {
                    this[this.tableRegs_Details.Card_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow CardsRow {
                get {
                    return ((CardsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Regs_Details_Cards"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Regs_Details_Cards"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow RegsRow {
                get {
                    return ((RegsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Regs_Details_Regs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Regs_Details_Regs"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransactionsRow : System.Data.DataRow {
            
            private TransactionsDataTable tableTransactions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactions = ((TransactionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableTransactions.idColumn]));
                }
                set {
                    this[this.tableTransactions.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Type_id {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.Type_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type_id\' in table \'Transactions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.Type_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Chart_id {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.Chart_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Chart_id\' in table \'Transactions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.Chart_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_id {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.Operation_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Operation_id\' in table \'Transactions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.Operation_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegDoc_id {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.RegDoc_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RegDoc_id\' in table \'Transactions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.RegDoc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Rec_Date {
                get {
                    return ((System.DateTime)(this[this.tableTransactions.Rec_DateColumn]));
                }
                set {
                    this[this.tableTransactions.Rec_DateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Rec_Date2 {
                get {
                    return ((System.DateTime)(this[this.tableTransactions.Rec_Date2Column]));
                }
                set {
                    this[this.tableTransactions.Rec_Date2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Client_id {
                get {
                    return ((int)(this[this.tableTransactions.Client_idColumn]));
                }
                set {
                    this[this.tableTransactions.Client_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal summ {
                get {
                    return ((decimal)(this[this.tableTransactions.summColumn]));
                }
                set {
                    this[this.tableTransactions.summColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum2 {
                get {
                    return ((decimal)(this[this.tableTransactions.sum2Column]));
                }
                set {
                    this[this.tableTransactions.sum2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dt_id {
                get {
                    return ((int)(this[this.tableTransactions.dt_idColumn]));
                }
                set {
                    this[this.tableTransactions.dt_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cr_id {
                get {
                    return ((int)(this[this.tableTransactions.cr_idColumn]));
                }
                set {
                    this[this.tableTransactions.cr_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dt_amount {
                get {
                    return ((decimal)(this[this.tableTransactions.dt_amountColumn]));
                }
                set {
                    this[this.tableTransactions.dt_amountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cr_amount {
                get {
                    return ((decimal)(this[this.tableTransactions.cr_amountColumn]));
                }
                set {
                    this[this.tableTransactions.cr_amountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dt_amount2 {
                get {
                    return ((decimal)(this[this.tableTransactions.dt_amount2Column]));
                }
                set {
                    this[this.tableTransactions.dt_amount2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cr_amount2 {
                get {
                    return ((decimal)(this[this.tableTransactions.cr_amount2Column]));
                }
                set {
                    this[this.tableTransactions.cr_amount2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'Transactions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableTransactions.sysUserColumn]));
                }
                set {
                    this[this.tableTransactions.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableTransactions.sysDateColumn]));
                }
                set {
                    this[this.tableTransactions.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dtCurrency {
                get {
                    return ((decimal)(this[this.tableTransactions.dtCurrencyColumn]));
                }
                set {
                    this[this.tableTransactions.dtCurrencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal crCurrency {
                get {
                    return ((decimal)(this[this.tableTransactions.crCurrencyColumn]));
                }
                set {
                    this[this.tableTransactions.crCurrencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow BaseChartsRow {
                get {
                    return ((BaseChartsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_BaseCharts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_BaseCharts"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow ClientsRow {
                get {
                    return ((ClientsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_Clients"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_Clients"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow OperationsRow {
                get {
                    return ((OperationsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_Operations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_Operations"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow RegDocsRow {
                get {
                    return ((RegDocsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_RegDocs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_RegDocs"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow RegsRowByFK_Transactions_Regs_Cr {
                get {
                    return ((RegsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_Regs_Cr"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_Regs_Cr"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow RegsRowByFK_Transactions_Regs_Dt {
                get {
                    return ((RegsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_Regs_Dt"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_Regs_Dt"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRow TransTypesRow {
                get {
                    return ((TransTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Transactions_TransTypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Transactions_TransTypes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsType_idNull() {
                return this.IsNull(this.tableTransactions.Type_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetType_idNull() {
                this[this.tableTransactions.Type_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChart_idNull() {
                return this.IsNull(this.tableTransactions.Chart_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChart_idNull() {
                this[this.tableTransactions.Chart_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperation_idNull() {
                return this.IsNull(this.tableTransactions.Operation_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperation_idNull() {
                this[this.tableTransactions.Operation_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegDoc_idNull() {
                return this.IsNull(this.tableTransactions.RegDoc_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegDoc_idNull() {
                this[this.tableTransactions.RegDoc_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableTransactions.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableTransactions.CommentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransTypesRow : System.Data.DataRow {
            
            private TransTypesDataTable tableTransTypes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransTypesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransTypes = ((TransTypesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableTransTypes.idColumn]));
                }
                set {
                    this[this.tableTransTypes.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCode {
                get {
                    return ((string)(this[this.tableTransTypes.SCodeColumn]));
                }
                set {
                    this[this.tableTransTypes.SCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTransTypes.NameColumn]));
                }
                set {
                    this[this.tableTransTypes.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sysUser {
                get {
                    return ((string)(this[this.tableTransTypes.sysUserColumn]));
                }
                set {
                    this[this.tableTransTypes.sysUserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime sysDate {
                get {
                    return ((System.DateTime)(this[this.tableTransTypes.sysDateColumn]));
                }
                set {
                    this[this.tableTransTypes.sysDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow[] GetTransactionsRows() {
                return ((TransactionsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Transactions_TransTypes"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _treeBaseAccountsRowChangeEvent : System.EventArgs {
            
            private _treeBaseAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRowChangeEvent(_treeBaseAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeBaseAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _treeCardsRowChangeEvent : System.EventArgs {
            
            private _treeCardsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRowChangeEvent(_treeCardsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeCardsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _treeClientsRowChangeEvent : System.EventArgs {
            
            private _treeClientsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRowChangeEvent(_treeClientsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _treeExtAccountsRowChangeEvent : System.EventArgs {
            
            private _treeExtAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRowChangeEvent(_treeExtAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeExtAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _treeOperationsRowChangeEvent : System.EventArgs {
            
            private _treeOperationsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRowChangeEvent(_treeOperationsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _treeOperationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseAccount_CardsRowChangeEvent : System.EventArgs {
            
            private BaseAccount_CardsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRowChangeEvent(BaseAccount_CardsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccount_CardsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseAccountsRowChangeEvent : System.EventArgs {
            
            private BaseAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRowChangeEvent(BaseAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseChartsRowChangeEvent : System.EventArgs {
            
            private BaseChartsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRowChangeEvent(BaseChartsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseChartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CardsRowChangeEvent : System.EventArgs {
            
            private CardsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRowChangeEvent(CardsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CardTypesRowChangeEvent : System.EventArgs {
            
            private CardTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRowChangeEvent(CardTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CardTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Client_RegDocsRowChangeEvent : System.EventArgs {
            
            private Client_RegDocsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRowChangeEvent(Client_RegDocsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Client_RegDocsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsRowChangeEvent : System.EventArgs {
            
            private ClientsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRowChangeEvent(ClientsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsFLRowChangeEvent : System.EventArgs {
            
            private ClientsFLRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRowChangeEvent(ClientsFLRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsFLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsPFRowChangeEvent : System.EventArgs {
            
            private ClientsPFRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRowChangeEvent(ClientsPFRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsPFRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsULRowChangeEvent : System.EventArgs {
            
            private ClientsULRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRowChangeEvent(ClientsULRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsULRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtAccount_CardsRowChangeEvent : System.EventArgs {
            
            private ExtAccount_CardsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRowChangeEvent(ExtAccount_CardsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccount_CardsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtAccountsRowChangeEvent : System.EventArgs {
            
            private ExtAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRowChangeEvent(ExtAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtChartsRowChangeEvent : System.EventArgs {
            
            private ExtChartsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRowChangeEvent(ExtChartsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtChartsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class linkAccountsRowChangeEvent : System.EventArgs {
            
            private linkAccountsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRowChangeEvent(linkAccountsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public linkAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MyTestDocumentRowChangeEvent : System.EventArgs {
            
            private MyTestDocumentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRowChangeEvent(MyTestDocumentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MyTestDocumentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Operation_DetailsRowChangeEvent : System.EventArgs {
            
            private Operation_DetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRowChangeEvent(Operation_DetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Operation_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationsRowChangeEvent : System.EventArgs {
            
            private OperationsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRowChangeEvent(OperationsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegDocsRowChangeEvent : System.EventArgs {
            
            private RegDocsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRowChangeEvent(RegDocsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegDocTypesRowChangeEvent : System.EventArgs {
            
            private RegDocTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRowChangeEvent(RegDocTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegDocTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegsRowChangeEvent : System.EventArgs {
            
            private RegsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRowChangeEvent(RegsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Regs_DetailsRowChangeEvent : System.EventArgs {
            
            private Regs_DetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRowChangeEvent(Regs_DetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Regs_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransactionsRowChangeEvent : System.EventArgs {
            
            private TransactionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRowChangeEvent(TransactionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransTypesRowChangeEvent : System.EventArgs {
            
            private TransTypesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRowChangeEvent(TransTypesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591